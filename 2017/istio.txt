
Istio服务网格逻辑上分为数据平面和控制平面
	1、数据平面：由一组以sidercar方式部署的智能代理（Envoy）组成。这些代理可以调节和控制微服务及Mixer之间所有的网络通信。
	2、控制平面：负责管理和配置代理来路由流量。此外控制平面配置Mixer以实施策略和收集遥测数据。
	
Envoy
	Istio使用Envoy代理的扩展版本，Envoy是以C++开发的高性能代理，用于调解服务网格中所有服务的所有入站和出站流量。Envoy的许多内置
	功能被istio发扬光大，如：
	
	1、动态服务发现；
	2、负载均衡；
	3、TLS终止；
	4、HTTP/2 & gRPC代理；
	5、熔断器；
	6、健康检查、基于百分比流量拆分的灰度发布；
	7、故障注入；
	8、丰富的度量指标；
	
	Envoy被部署为sldecar，和对应服务在同一个kubernetes pod中。这允许istio将大量关于流量行为的信号作为属性提取出来，而这些属性又可以
	在Mixer中用于执行策略决策，并发送给监控系统，以提供整个网格行为的信息。
	
	sidecar代理模型还可以将istio的功能添加到现有部署中，而无需重新构建或重写代码。
	
Mixer
	是一个独立于平台的组件，负责在服务网格上执行访问控制和使用策略，并从Envoy代理和其他服务收集遥测数据。代理提取请求级属性，发送到Mixer
	进行评估。Mixer中包括一个灵活的插件模型，使其能够接入到各种主机环境和基础设施后端，从这些细节中抽象出Envoy代理和istio管理的服务。
	
Pilot
	为Envoy sidecar提供服务发现功能，为智能路由（例如A/B测试、金丝雀部署）和弹性（超时、重试、熔断器等）提供流量管理功能。它将流量行为的
	高级路由规则转换为特定于Envoy的配置，并在运行时将它们传播到sidecar。Pilot将平台特定的服务发现机制抽象化并将其合成为符合Envoy数据平面API
	的任何sidecar都可以使用的标准。这种松散耦合使得istio能够在多种环境下运行（例如k8s、consul、Nomad），同时保持用于流量管理的相同操作界面。
	
	它的管理和配置部署在特定istio服务网格中的所有Envoy代理实例中。Pilot负责管理通过istio服务网格发布的Envoy实例的生命周期。
	
	在网格中Pilot维护了一个服务的规则表示并独立于底层平台。Pilot中的特定于平台的适配器负责适当地填充这个规范模型。例如，k8s适配器。
	
Citadel
	通过内置身份和凭证管理可以提供强大的服务间和最终用户身份验证。可用于升级服务网格中未加密的流量，并为运维人员提供基于服务标识而不是网络
	控制的强制执行策略的能力。
	
Ingress和Egress
	istio假定进入和离开服务网络的所有流量都会通过Envoy代理进行传输。
	
Virtual Service
	是在istio服务网格内对服务的请求如何进行路由控制？
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	