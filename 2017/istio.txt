
系统的复杂性
	服务发现、负载均衡、故障恢复、度量和监控、A/B测试、金丝雀发布、速率限制、访问控制、端到端认证；
	Istio提供了对整个服务网格的行为洞察和操作控制的能力，以及一个完整的满足微服务应用各种需求的解决方案。
	sidecar代理会拦截微服务之间的所有网络通信，然后使用其控制平面的功能来配置和管理Istio，这包括：
	1、为HTTP、gRPC、WebSocket和TCP流量自动负载均衡。
	2、通过丰富的路由规则、重试、故障转移和故障注入对流量行为进行细粒度控制。
	3、可插拔的策略层和配置API，支持访问控制、速率限制和配额。
	4、集群内（包括集群的入口和出口）所有流量的自动化度量、日志记录和追踪。
	5、在具有强大的基于身份验证和授权的集群中实现安全的服务间通信。

核心特性
	流量管理
		Istio 的流量管理模型源于和服务一起部署的 Envoy 代理。网格内服务发送和接收的所有流量（data plane流量）都经由 Envoy 代理，这让控制网格内的流量变得异常简单，而且不需要对服务做任何的更改。
		Istio 简单的规则配置和流量路由允许您控制服务之间的流量和 API 调用过程。Istio 简化了服务级属性（如熔断器、超时和重试）的配置，并且让它轻而易举的执行重要的任务（如 A/B 测试、金丝雀发布和按流量百分比划分的分阶段发布）。
		有了更好的对流量的可视性和开箱即用的故障恢复特性，您就可以在问题产生之前捕获它们，无论面对什么情况都可以使调用更可靠，网络更健壮。
	安全
		Istio 的安全特性解放了开发人员，使其只需要专注于应用程序级别的安全。Istio 提供了底层的安全通信通道，并为大规模的服务通信管理认证、授权和加密。有了 Istio，服务通信在默认情况下就是受保护的，可以让您在跨不同协议和运行时的情况下实施一致的策略——而所有这些都只需要很少甚至不需要修改应用程序。
		Istio 是独立于平台的，可以与 Kubernetes（或基础设施）的网络策略一起使用。但它更强大，能够在网络和应用层面保护pod到 pod 或者服务到服务之间的通信。
	可观察性
		Istio 健壮的追踪、监控和日志特性让您能够深入的了解服务网格部署。通过 Istio 的监控能力，可以真正的了解到服务的性能是如何影响上游和下游的；而它的定制 Dashboard 提供了对所有服务性能的可视化能力，并让您看到它如何影响其他进程。
		Istio 的 Mixer 组件负责策略控制和遥测数据收集。它提供了后端抽象和中介，将一部分 Istio 与后端的基础设施实现细节隔离开来，并为运维人员提供了对网格与后端基础实施之间交互的细粒度控制。
		所有这些特性都使您能够更有效地设置、监控和加强服务的 SLO。当然，底线是您可以快速有效地检测到并修复出现的问题。
	
	
Istio服务网格逻辑上分为数据平面和控制平面
	1、数据平面：由一组以sidercar方式部署的智能代理（Envoy）组成。这些代理可以调节和控制微服务及Mixer之间所有的网络通信。
	2、控制平面：负责管理和配置代理来路由流量。此外控制平面配置Mixer以实施策略和收集遥测数据。
	
Envoy
	Istio使用Envoy代理的扩展版本，Envoy是以C++开发的高性能代理，用于调解服务网格中所有服务的所有入站和出站流量。Envoy的许多内置
	功能被istio发扬光大，如：
	
	1、动态服务发现；
	2、负载均衡；
	3、TLS终止；
	4、HTTP/2 & gRPC代理；
	5、熔断器；
	6、健康检查、基于百分比流量拆分的灰度发布；
	7、故障注入；
	8、丰富的度量指标；
	
	Envoy被部署为sldecar，和对应服务在同一个kubernetes pod中。这允许istio将大量关于流量行为的信号作为属性提取出来，而这些属性又可以
	在Mixer中用于执行策略决策，并发送给监控系统，以提供整个网格行为的信息。
	
	sidecar代理模型还可以将istio的功能添加到现有部署中，而无需重新构建或重写代码。
	
Mixer
	是一个独立于平台的组件，负责在服务网格上执行访问控制和使用策略，并从Envoy代理和其他服务收集遥测数据。代理提取请求级属性，发送到Mixer
	进行评估。Mixer中包括一个灵活的插件模型，使其能够接入到各种主机环境和基础设施后端，从这些细节中抽象出Envoy代理和istio管理的服务。
	
	Envoy上报访问监测数据到Mixer，Mixer将数据转发给对应的监控后台（如监控指标、日志、调用链等）；
	Envoy进行服务访问时，通过Mixer连接后端服务来控制服务间的访问，判断访问是放行还是拒绝，包括流量速率控制；
Pilot
	为Envoy sidecar提供服务发现功能，为智能路由（例如A/B测试、金丝雀部署）和弹性（超时、重试、熔断器等）提供流量管理功能。它将流量行为的
	高级路由规则转换为特定于Envoy的配置，并在运行时将它们传播到sidecar。Pilot将平台特定的服务发现机制抽象化并将其合成为符合Envoy数据平面API
	的任何sidecar都可以使用的标准。这种松散耦合使得istio能够在多种环境下运行（例如k8s、consul、Nomad），同时保持用于流量管理的相同操作界面。
	
	它的管理和配置部署在特定istio服务网格中的所有Envoy代理实例中。Pilot负责管理通过istio服务网格发布的Envoy实例的生命周期。
	
	在网格中Pilot维护了一个服务的规则表示并独立于底层平台。Pilot中的特定于平台的适配器负责适当地填充这个规范模型。例如，k8s适配器。
	
	Envoy从Pilot获取负载均衡策略、流量治理规则（灰度、A/B）、安全配置（加密身份认证等）；
	
Citadel
	通过内置身份和凭证管理可以提供强大的服务间和最终用户身份验证。可用于升级服务网格中未加密的流量，并为运维人员提供基于服务标识而不是网络
	控制的强制执行策略的能力。
	
Ingress和Egress
	istio假定进入和离开服务网络的所有流量都会通过Envoy代理进行传输。
	
Virtual Service
	是在istio服务网格内对服务的请求如何进行路由控制？
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
