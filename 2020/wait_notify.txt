https://blog.csdn.net/u013394527/article/details/80560153

public class WaitNotifyCase {
    public static void main(String[] args) {
        final Object lock = new Object();
 
        new Thread(new Runnable() {
            @Override
            public void run() {
                synchronized (lock) {
                    try {
                        TimeUnit.SECONDS.sleep(1);
                        lock.wait();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }).start();
 
        new Thread(new Runnable() {
            @Override
            public void run() {
                synchronized (lock) {
                    try {
                        TimeUnit.SECONDS.sleep(5);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    lock.notify();
                }
            }
        }).start();
    }
}

前提一：由同一个lock对象调用wait、notify方法，和 synchronized 锁。  

前提二：wait、nofity调用时必须加 synchronized(lock) 同步

1、当线程A执行wait方法时，该线程会被挂起(即阻塞)，同时会释放对象锁（这就能解释上面的例子不会发生死锁）；
2、当线程B执行notify方法时，会唤醒一个被挂起的线程A；

 

lock对象、线程A和线程B三者是一种什么关系？根据上面的结论，可以想象一个场景：
1、lock对象维护了一个等待队列list；
2、线程A中执行lock的wait方法，把线程A保存到lock锁的 阻塞队列 中；
3、线程B中执行lock的notify方法，从lock锁的等待队列中取出线程A继续执行；若有多条线程被lock锁阻塞，则会随机唤醒一条线程继续执行。
4、若线程B中执行 lock.nofityAll方法，则能一次性 唤醒 所有被 lock锁 阻塞住的线程。
 
 
疑问一：为什么 wait 前必须加 synchronized 同步

答: 线程执行lock.wait()方法时，当前线程必须持有该lock对象的monitor，这是jvm层要求，如果wait方法在synchronized代码中执行，该线程已经获取synchronized的锁，从而持有了lock对象的monitor。 monitor是jvm层表述每个对象实例的一个flag，每个对象的对象头信息中都有这样一个flag。     

简单说：wait会释放当前线程的对象锁，既然是要释放锁，那就必须先获取锁，而 synchronized 就是同步锁，线程能执行同步代码块，则必须获得synchronized的锁。

因此：waite()和notify()因为会对对象的“锁标志”进行操作，所以它们必须在 synchronized函数 或 synchronized代码块 中进行调用。如果在 non-synchronized函数 或 non-synchronized代码块 中进行调用，虽然能编译通过，但在运行时会发生IllegalMonitorStateException的异常。

 

疑问二：为什么 notify 前必须加 synchronized同步 

个人理解:  wait释放了锁后被阻塞，notify用于唤醒被wait阻塞的线程，并让出锁给wait所在的线程。 既然notify要让出锁，那notify必然先获得锁，不然拿什么让给wait线程呢？

       obj.notify()：该方法的调用，会从所有正在等待obj对象锁的线程中，唤醒其中的一个（选择算法依赖于不同实现），被唤醒的线程此时加入到了obj对象锁的争夺之中。

        注意： 然而该notify方法的执行线程在 调用  lock.notify() 时并未立即释放obj的对象锁，毕竟这段代码还是执行在 synchronized同步代码中的 。  实际上释放动作是在执行完 lock.notify后并且离开synchronized代码块时释放锁的。  因此在notify方法之后，synchronized代码块结束之前，所有其他被唤醒的，等待obj对象锁的线程依旧被阻塞。

 

疑问二：线程A获取了synchronized锁，执行wait方法并挂起，线程B又如何再次获取锁？

答：线程A 在 执行lock.wait() 时，会阻塞线程A，同时立即释放 lock锁， 这样 线程B 才能再次获取 lock对象锁。
