面向对象的3大特性：
1、封装
2、继承
3、多态：不同类的对象对同一消息作出不同的响应就叫做多态。

多态的作用：解耦

多态存在的3个条件
1、有继承关系
2、子类重写父类方法：所以static、final、private/protected方法不能多态
3、父类引用指向子类对象

1、static方法，因为被static修饰的方法是属于类的，而不是属于实例的
2、final方法，因为被final修饰的方法无法被子类重写
3、private方法和protected方法，前者是因为被private修饰的方法对子类不可见，后者是因为尽管被protected修饰的方法可以被子类见到，也可以被子类重写，但是它是无法被外部所引用的，一个不能被外部引用的方法，怎么能谈多态呢

 多态的分类
1、编译时多态，即方法的重载，从JVM的角度来讲，这是一种静态分派（static dispatch）
2、运行时多态，即方法的重写，从JVM的角度来讲，这是一种动态分派（dynamic dispatch）

java类初始化顺序
静态变量/静态代码块 -> main方法 -> 非静态变量/代码块 -> 构造方法

父类–静态变量/父类–静态初始化块
子类–静态变量/子类–静态初始化块
父类–变量/父类–初始化块
父类–构造器
子类–变量/子类–初始化块
子类–构造器

ClassLoader
类加载过程
1、加载：将class字节码文件加载到内存中，并将这些数据转换成方法区中的运行时数据（静态变量、静态代码块、常量池等），在堆中生成一个Class类对象代表这个类（反射原理），作为方法区类数据的访问入口。
2、链接：将Java类的二进制代码合并到JVM的运行状态之中。包括：
  验证：确保加载的类信息符合JVM规范，没有安全方面的问题。
  准备：正式为类变量(static变量)分配内存并设置类变量初始值的阶段，这些内存都将在方法区中进行分配。注意此时的设置初始值为默认值，具体赋值在初始化阶段完成。
  解析：虚拟机常量池内的符号引用替换为直接引用（地址引用）的过程。
 3、初始化：初始化阶段是执行类构造器<clinit>()方法的过程。类构造器<clinit>()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块(static块)中的语句合并产生的。
  当初始化一个类的时候，如果发现其父类还没有进行过初始化、则需要先初始化其父类。
  虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步。
  
