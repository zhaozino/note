
JWT包括：头部(header)、负载(payload)、签证(signature)，用.拼接起来构成了Jwt字符串。

signature = HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  secret)

jwt = base64UrlEncode(header).base64UrlEncode(payload).signature

header：1、声明类型，即jwt；2、声明加密的算法，通常直接使用HMAC SHA256；
	然后header json进行base64加密；
	{
	  'typ': 'JWT',
	  'alg': 'HS256'
	}

payload：1、标准中注册的声明；2、公共的声明；3、私有的声明；
	1、标准中注册的声明（建议但不强制使用）
		iss: jwt签发者
		sub: jwt所面向的用户
		aud: 接收jwt的一方
		exp: jwt的过期时间，这个过期时间必须要大于签发时间
		nbf: 定义在什么时间之前，该jwt都是不可用的.
		iat: jwt的签发时间
		jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。
	2、公共的声明：公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.
	3、私有的声明：是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。
	将payload进行base64加密，得到Jwt的第二部分，payload json如下：
		{
		  "sub": "1234567890",
		  "name": "John Doe",
		  "admin": true
		}
		
signature：即加密后的header、payload，防止数据被篡改；这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的signature。
将这三部分用.连接成一个完整的字符串,构成了最终的jwt。
secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。

1、Browser username/password登陆Server；
2、Server用secret生成JWT，返回给Browser；
3、Browser向Server请求相关资源，header里附带JWT；
4、Server端校验JWT的有效性，并返回结果给Browser；

header、payload都不能存敏感信息，因为base64对称加密，很容易被解密，signature签名的意义（通过加盐secret，且secret存储在jwt的服务器端，即签发jwt的服务端）是保证header、payload没被篡改，且jwt签发服务端可以通过重复加密过程，来验证jwt是否有效的jwt；jwt相当于一个token，对客户端来讲也不需要修改、添加jwt信息，所以即可以使用对称加密算法也可以使用非对称加密算法；

jwt分为HS256对称加密和rsa非对称加密算法；

微信支付签名过程类似：
1、签名算法
（签名校验工具）
签名生成的通用步骤如下：

第一步，设所有发送或者接收到的数据为集合M，将集合M内非空参数值的参数按照参数名ASCII码从小到大排序（字典序），使用URL键值对的格式（即key1=value1&key2=value2…）拼接成字符串stringA。

特别注意以下重要规则：

◆ 参数名ASCII码从小到大排序（字典序）；
◆ 如果参数的值为空不参与签名；
◆ 参数名区分大小写；
◆ 验证调用返回或微信主动通知签名时，传送的sign参数不参与签名，将生成的签名与该sign值作校验。
◆ 微信接口可能增加字段，验证签名时必须支持增加的扩展字段
第二步，在stringA最后拼接上key得到stringSignTemp字符串，并对stringSignTemp进行MD5运算，再将得到的字符串所有字符转换为大写，得到sign值signValue。 注意：密钥的长度为32个字节。

◆ key设置路径：微信商户平台(pay.weixin.qq.com)-->账户设置-->API安全-->密钥设置

举例：

假设传送的参数如下：

appid： wxd930ea5d5a258f4f

mch_id： 10000100

device_info： 1000

body： test

nonce_str： ibuaiVcKdpRxkhJA

第一步：对参数按照key=value的格式，并按照参数名ASCII字典序排序如下：

stringA="appid=wxd930ea5d5a258f4f&body=test&device_info=1000&mch_id=10000100&nonce_str=ibuaiVcKdpRxkhJA";

第二步：拼接API密钥：

MD5签名方式：

stringSignTemp=stringA+"&key=192006250b4c09247ec02edce69f6a2d" //注：key为商户平台设置的密钥key

sign=MD5(stringSignTemp).toUpperCase()="9A0A8659F005D6984697E2CA0A9CF3B7" //注：MD5签名方式


HMAC-SHA256签名方式：

stringSignTemp=stringA+"&key=192006250b4c09247ec02edce69f6a2d" //注：key为商户平台设置的密钥key

sign=hash_hmac("sha256",stringSignTemp,key).toUpperCase()="6A9AE1657590FD6257D693A078E1C3E4BB6BA4DC30B23E0EE2496E54170DACD6" //注：HMAC-SHA256签名方式，部分语言的hmac方法生成结果二进制结果，需要调对应函数转化为十六进制字符串。

最终得到最终发送的数据：

<xml>

<appid>wxd930ea5d5a258f4f</appid>

<mch_id>10000100</mch_id>

<device_info>1000</device_info>

<body>test</body>

<nonce_str>ibuaiVcKdpRxkhJA</nonce_str>

<sign>9A0A8659F005D6984697E2CA0A9CF3B7</sign>

</xml>

2、生成随机数算法
微信支付API接口协议中包含字段nonce_str，主要保证签名不可预测。我们推荐生成随机数算法如下：调用随机数函数生成，将得到的值转换为字符串。

3、API证书
（1）获取API证书（什么是api证书？如何升级？）

微信支付接口中，涉及资金回滚的接口会使用到API证书，包括退款、撤销接口。商家在申请微信支付成功后，收到的相应邮件后，可以按照指引下载API证书，也可以按照以下路径下载：微信商户平台(pay.weixin.qq.com)-->账户中心-->账户设置-->API安全；


md5加盐
用户名/密码 md5加密，黑客获取数据库表后，通过把666666/888888等常用的密码算出md5进行碰库，容易得到用户的密码，为了防止这种情况，可以为md5加盐，如：md5(password + 固定盐字符串)，但固定的盐字符串也有可能泄密，所以盐要随机，加在md5之后的结果里：

public static Guid ToRandomMD5(string input)
{
    using (var md5Provider = new MD5CryptoServiceProvider())
    {
        //获取一个256以内的随机数,用于充当 "盐"
        var salt = (byte)Math.Abs(new object().GetHashCode() % 256);
        input += salt;
        var bytes = Encoding.UTF8.GetBytes(input);
        var hash = md5Provider.ComputeHash(bytes);
        hash[0] = salt;
        return new Guid(hash);
    }
}
 
public static bool EqualsRandomMD5(string input, Guid rmd5)
{
    var arr = rmd5.ToByteArray();
    //将盐取出来
    var salt = arr[0];
    using (var md5Provider = new MD5CryptoServiceProvider())
    {
        input += salt;
        var bytes = Encoding.UTF8.GetBytes(input);
        var hash = md5Provider.ComputeHash(bytes);
        for (int i = 1; i < 16; i++)
        {
            if (hash[i] != arr[i])
            {
                return false;
            }
        }
        return true;
    }
}

简单的来说就是把盐放到密文里面 md5 hash完之后得到一个16长度的byte 而byte可以保存0~255的整数 ,所以例子里面,随机的盐就是0~255的数字

然后md5(明文+盐)之后 再将盐保存到 byte[0] 的位置

这样每次hash之后 密文都是不同的 但是依然可以直接密文比较, 这里就是抛砖引玉,觉得255不够的 还可以加一位

当然也可以直接放在1~15的索引上

当然也可以把索引15的byte对15取余后得到0~14然后再放进去....
