
JWT包括：头部(header)、负载(payload)、签证(signature)，用.拼接起来构成了Jwt字符串。

header：1、声明类型，即jwt；2、声明加密的算法，通常直接使用HMAC SHA256；
	然后header json进行base64加密；
	{
	  'typ': 'JWT',
	  'alg': 'HS256'
	}

payload：1、标准中注册的声明；2、公共的声明；3、私有的声明；
	1、标准中注册的声明（建议但不强制使用）
		iss: jwt签发者
		sub: jwt所面向的用户
		aud: 接收jwt的一方
		exp: jwt的过期时间，这个过期时间必须要大于签发时间
		nbf: 定义在什么时间之前，该jwt都是不可用的.
		iat: jwt的签发时间
		jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。
	2、公共的声明：公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.
	3、私有的声明：是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。
	将payload进行base64加密，得到Jwt的第二部分，payload json如下：
		{
		  "sub": "1234567890",
		  "name": "John Doe",
		  "admin": true
		}
		
signature：即加密后的header、payload，防止数据被篡改；这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的signature。
将这三部分用.连接成一个完整的字符串,构成了最终的jwt。
secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。

1、Browser username/password登陆Server；
2、Server用secret生成JWT，返回给Browser；
3、Browser向Server请求相关资源，header里附带JWT；
4、Server端校验JWT的有效性，并返回结果给Browser；
