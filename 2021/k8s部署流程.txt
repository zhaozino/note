apiVersion: apps/v1
	kind: Deployment
	metadata:
		name: nginx-deployment
	spec:
		selector:
			matchLabels:
				app: nginx
		replicas: 2 # tells deployment to run 2 pods matching the template
		template:
			metadata:
				labels:
					app: nginx
			spec:
				containers:
				- name: nginx
					image: nginx:1.14.2
					ports:
					- containerPort: 80
					
kubectl create -f tomcat-deployment.yaml
kubectl get deployments

apiVersion: v1
	kind: Service
	metadata:
		name: nginx
		labels:
			app: nginx
	spec:
		ports:
		- port: 80
		clusterIP: None //Headless Service
		selector:
			app: nginx

kubectl create -f nginx-svc.yaml
kubectl get svc

滚动更新容器镜像
	kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1 #deployment是类型，nginx-deployment是deployment的名字，nginx是容器的名字，nginx:1.9.1是容器镜像信息
	或kubectl edit deployment/nginx-deployment，修改文本保存；
	
	kubectl rollout history deployment/nginx-deployment --revision=3 //查看特定版本信息
	kubectl rollout undo deployment/nginx-deployment //撤销本次发布并回滚到上一个部署版本
	kubectl rollout undo deployment/nginx-deployment --to-revision=2 //回滚到特定版本

构建镜像并上传到远程镜像仓库
	cd Dockerfile
	docker build -t nginx:v3 .
	
	docker login -u zhaozino@163.com zhaozino-docker.pkg.coding.net
	
	docker tag nginx:v3 zhaozino-docker.pkg.coding.net/minimall/server/nginx:v3
	
	docker push zhaozino-docker.pkg.coding.net/minimall/server/nginx:v3
	docker pull zhaozino-docker.pkg.coding.net/minimall/server/nginx:v3

********************************************************************************
k8s从私有仓库拉取镜像
	一般拉取镜像前要先登录，docker login https://xxxxx，但k8s集群比较大时，在每个节点上login是不可行的。
	在执行完docker login https://xxxxx并完成认证的时候，实际是在当前用户的home目录的.docker目录下生成了一个config.json文件，这个文件包含了认证信息。
	 {
    	"auths": {
    		"https://myhub.fdccloud.com": {
    			"auth": "xxxx",
    			"email": "yanw02@mysoft.com.cn"
    		},
    	}
   }
	 可以将这个文件存到secret里使用，就可以通过私有仓库的认证了；
	 
1、在k8s master上通过docker login登录registry，生成config.json文件。然后执行如下命令，将文件转换成base64编码：
	cat /root/.docker/config.json|base64 -w 0

2、生成registrykey-myhub.yml的配置文件，内容如下：
	apiVersion: v1
	kind: Secret
	metadata:
		name: registrykey-myhub
		namespace: default
	type: kubernetes.io/dockerconfigjson
	data:
		.dockerconfigjson: ewoJImF1dGhzIjogewoJCSJodHRwczovL215aHViLmZkY2Nsb3VkLmNvbS8iOiB7CgkJCSJhdXRoIjogIllXUnRhVzQ2VFhsemIyWjBPVFU1TXpnPSIsCgkJCSJlbWFpbCI6ICJ5YW53MDJAbXlzb2Z0LmNvbS5jbiIKCQl9Cgl9Cn0=
	
	#创建secret：
	kubectl create -f registrykey-myhub.yml
	
	或者用文件路径：
	kubectl create secret generic regcred \
     --from-file=.dockerconfigjson=<path/to/.docker/config.json> \
     --type=kubernetes.io/dockerconfigjson
	
3、在创建pod时，指定imagePullSecrets，示例如下：
	
	apiVersion: apps/v1
	kind: Deployment
	metadata:
		name: mynginx-deployment
	spec:
		selector:
			matchLabels:
				app: mynginx
		replicas: 2 # tells deployment to run 2 pods matching the template
		template:
			metadata:
				labels:
					app: mynginx
			spec:
				containers:
				- name: mynginx
					image: zhaozino-docker.pkg.coding.net/minimall/server/mynginx:v1
					ports:
					- containerPort: 80
				imagePullSecrets:
				- name: registrykey-myhub
					
	kubectl create -f mynginx-deployment.yaml
	kubectl get deployments

	apiVersion: v1
	kind: Service
	metadata:
	  name: mynginx
	  labels:
	    app: mynginx
	spec:
		ports:
		- port: 8181
		clusterIP: None //Headless Service
		selector:
			app: mynginx

	kubectl create -f mynginx-svc.yaml
	kubectl get svc

Ingress：Daemonset会在每个node上都将启动一个Nginx服务；
nginx-ingress-daemonset.yaml
  apiVersion:  apps/v1
	kind: DaemonSet
	metadata:
	  name: nginx-ingress-lb
		labels:
		  name: nginx-ingress-lb
	  namespace: kube-system
	spec:
	  template:
		  metadata:
			  labels:
				  name: nginx-ingress-lb
			spec:
			  terminationGracePeriodSeconds: 60
				containers:
				- image: gcr.io/google_containers/nginx-ingress-controller:0.9.0-beta.2
				  name: nginx-ingress-lb
					readinessProbe:
					  httpGet:
						  path: /healthz
							port: 10254
							scheme: HTTP
					livenessProbe:
					  httpGet:
						  path: /healthz
							port: 10254
							scheme: HTTP
						initialDelaySeconds: 10
						timeoutSeconds: 1
					ports:
					- containerPort: 80
					  hostPort: 801
					- containerPort: 443
					  hostPort: 4431
					env:
					  - name: POD_NAME
						  valueFrom:
							  fieldRef:
								  fieldPath: metadata.name
						- name: POD_NAMESPACE
						  valueFrom:
							  fieldRef:
								  fieldPath: metadata.namespace
					args:
					- /nginx-ingress-controller
					- --default-backend-service=${PRO_NAMESPACE}/default-http-backend
					
	******************************************************************************
					
  defalut-backend-deployment.yaml
	apiVersion: apps/v1
	kind: Deployment
	metadata:
	  name: defalut-http-backend
		labels:
		  k8s-app: defalut-http-backend
		namespace: kube-system
	spec:
	  selector:
			matchLabels:
				k8s-app: defalut-http-backend
	  replicas: 1
		template:
		  metadata:
			  labels:
				  k8s-app: defalut-http-backend
			spec:
			  terminationGracePeriodSeconds: 60
				containers:
				- name: defalut-http-backend
				  image: gcr.io/google_containers/defalutbackend:1.0
					livenessProbe:
					  httpGet:
						  path: /healthz
							port: 8080
							scheme: HTTP
						initialDelaySeconds: 5
						timeoutSeconds: 5
					ports:
					- containerPort: 8080
					resources:
					  limits:
						  cpu: 10m
							memory: 20Mi
						requests:
						  cpu: 10m
							memory: 20Mi
							
  ******************************************************************************
	defalut-backend-service.yaml
	apiVersion: v1
	kind: Service
	metadata:
	  name: defalut-http-backend
		namespace: kube-system
		labels:
		  k8s-app: defalut-http-backend
	spec:
	  ports:
		- port: 80
		  targetPort: 8080
		selector:
		  k8s-app: default-http-backend
			
	******************************************************************************
	apiVersion: apps/v1
	kind: Ingress
	metadata:
	  name: mywebsite-ingress
	spec:
	  rules:
		- host: mywebsite.com
		  http:
			  paths:
				- path: /demo
				  backend:
					  serviceName: webapp
						servicePort: 8080
						
					
						




