cd Dockerfile

FROM nginx
RUN echo '这是一个本地构建的nginx镜像' > /usr/share/nginx/html/index.html

FROM
	定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。

RUN
	用于执行后面跟着的命令行命令。有以下俩种格式：

	shell 格式：
	RUN <命令行命令>
	# <命令行命令> 等同于，在终端操作的 shell 命令。
	
	exec 格式：
	RUN ["可执行文件", "参数1", "参数2"]
	# 例如：
	# RUN ["./test.php", "dev", "offline"] 等价于 RUN ./test.php dev offline
	
	Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。例如：
	FROM centos
	RUN yum install wget
	RUN wget -O redis.tar.gz "http://download.redis.io/releases/redis-5.0.3.tar.gz"
	RUN tar -xvf redis.tar.gz
	
	以上执行会创建 3 层镜像。可简化为以下格式：
	FROM centos
	RUN yum install wget \
			&& wget -O redis.tar.gz "http://download.redis.io/releases/redis-5.0.3.tar.gz" \
			&& tar -xvf redis.tar.gz
			
构建镜像
	cd Dockerfile
	docker build -t nginx:v3 .
	
	.是上下文路径：是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。

指令详解

COPY
	复制指令，从上下文目录中复制文件或者目录到容器里指定路径。
	
	COPY [--chown=<user>:<group>] <源路径1>...  <目标路径>
	COPY [--chown=<user>:<group>] ["<源路径1>",...  "<目标路径>"]
	
	[--chown=<user>:<group>]：可选参数，用户改变复制到容器内文件的拥有者和属组。
	
	<源路径>：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：
		COPY hom* /mydir/
		COPY hom?.txt /mydir/
		
	<目标路径>：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。
	
ADD
	ADD 指令和 COPY 的使用格式一致（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：
	
	ADD 的优点：在执行 <源文件> 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 <目标路径>。
	
	ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。

CMD
	类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:
	
	CMD 在docker run 时运行。
	RUN 是在 docker build。
	
	作用：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。
	注意：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。

	格式：
	CMD <shell 命令> 
	CMD ["<可执行文件或命令>","<param1>","<param2>",...] 
	CMD ["<param1>","<param2>",...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数
	
	推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。
	
ENTRYPOINT
	类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。
	但是, 如果运行 docker run 时使用了 --entrypoint 选项，将覆盖 CMD 指令指定的程序。
	
	优点：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。
	注意：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。
	
	格式：
	ENTRYPOINT ["<executeable>","<param1>","<param2>",...]
	
	可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。
	示例：假设已通过 Dockerfile 构建了 nginx:test 镜像：
		
		FROM nginx
		ENTRYPOINT ["nginx", "-c"] # 定参
		CMD ["/etc/nginx/nginx.conf"] # 变参，CMD 可以用作 ENTRYPOINT 默认参数， 或者用作 Docker 的默认命令；
		
	1、不传参运行
		docker run  nginx:test
		
		容器内会默认运行以下命令，启动主进程。
		nginx -c /etc/nginx/nginx.conf
	
	2、传参运行
		docker run  nginx:test -c /etc/nginx/new.conf
		
		容器内会默认运行以下命令，启动主进程(/etc/nginx/new.conf:假设容器内已有此文件)
		nginx -c /etc/nginx/new.conf

ENV
	设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。

	格式：
	ENV <key> <value>
	ENV <key1>=<value1> <key2>=<value2>...
	
	以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：
	ENV NODE_VERSION 7.2.0
	RUN curl -SLO "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz" \
		&& curl -SLO "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"
		
ARG
	构建参数，与 ENV 作用一至。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。
	构建命令 docker build 中可以用 --build-arg <参数名>=<值> 来覆盖。

	格式：
	ARG <参数名>[=<默认值>]
	
VOLUME
	定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。
	
	作用：
	避免重要的数据，因容器重启而丢失，这是非常致命的。
	避免容器不断变大。
	
	格式：
	VOLUME ["<路径1>", "<路径2>"...]
	VOLUME <路径>
	
	在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。
	
EXPOSE
	仅仅只是声明端口。
	
	作用：
	帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。
	在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。
	
	格式：
	EXPOSE <端口1> [<端口2>...]
	
WORKDIR
	指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。
	docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。
	
	格式：
	WORKDIR <工作目录路径>
	
USER
	用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。

	格式：
	USER <用户名>[:<用户组>]
	
HEALTHCHECK
	用于指定某个程序或者指令来监控 docker 容器服务的运行状态。

	格式：
	HEALTHCHECK [选项] CMD <命令>：设置检查容器健康状况的命令
	HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令
	HEALTHCHECK [选项] CMD <命令> : 这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。
	
ONBUILD
	用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。
	当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这是执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。
	
	格式：
	ONBUILD <其它指令>
	
LABEL
	LABEL 指令用来给镜像添加一些元数据（metadata），以键值对的形式，语法格式如下：
		LABEL <key>=<value> <key>=<value> <key>=<value> ...
		
	比如我们可以添加镜像的作者：
		LABEL org.opencontainers.image.authors="runoob"

docker tag : 标记本地镜像，将其归入某一仓库。
	语法
	docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]
	
	实例
	将镜像ubuntu:15.10标记为 runoob/ubuntu:v3 镜像。
	docker tag ubuntu:15.10 runoob/ubuntu:v3
	
	docker images   runoob/ubuntu:v3
	REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
	runoob/ubuntu       v3                  4e3b13c8a266        3 months ago        136.3 MB


docker仓库登陆过程：
1、构建镜像
	cd Dockerfile
	docker build -t nginx:v3 .
	
2、登陆镜像仓库
	docker login -u zhaozino@163.com zhaozino-docker.pkg.coding.net

3、给本地的镜像打标签
	docker tag nginx:v3 zhaozino-docker.pkg.coding.net/minimall/server/nginx:v3
	
4、推送您的 docker 镜像
	docker push zhaozino-docker.pkg.coding.net/minimall/server/nginx:v3

拉取镜像
	docker pull zhaozino-docker.pkg.coding.net/minimall/server/nginx:v3
	
*************************************************************************************************
Dockerfile最佳实践
使用 .dockerignore 文件
使用 Dockerfile 构建镜像时最好是将 Dockerfile 放置在一个新建的空目录下。然后将构建镜像所需要的文件添加到该目录中。为了提高构建镜像的效率，
你可以在目录下新建一个 .dockerignore 文件来指定要忽略的文件和目录。.dockerignore 文件的排除模式语法和 Git 的 .gitignore 文件相似。

#使用多阶段构建
在 Docker 17.05 以上版本中，你可以使用 多阶段构建 来减少所构建镜像的大小。

避免安装不必要的包
为了降低复杂性、减少依赖、减小文件大小、节约构建时间，你应该避免安装任何不必要的包。例如，不要在数据库镜像中包含一个文本编辑器。

镜像层数尽可能少
你需要在 Dockerfile 可读性（也包括长期的可维护性）和减少层数之间做一个平衡。

#将多行参数排序
将多行参数按字母顺序排序（比如要安装多个包时）。这可以帮助你避免重复包含同一个包，更新包列表时也更容易。也便于 PRs 阅读和审查。建议在反斜杠符号 \ 之前添加一个空格，以增加可读性。

下面是来自 buildpack-deps 镜像的例子：

RUN apt-get update && apt-get install -y \
  bzr \
  cvs \
  git \
  mercurial \
  subversion
	
构建缓存
在镜像的构建过程中，Docker 会遍历 Dockerfile 文件中的指令，然后按顺序执行。在执行每条指令之前，Docker 都会在缓存中查找是否已经存在可重用的镜像，如果有就使用现存的镜像，不再重复创建。如果你不想在构建过程中使用缓存，你可以在 docker build 命令中使用 --no-cache=true 选项。

但是，如果你想在构建的过程中使用缓存，你得明白什么时候会，什么时候不会找到匹配的镜像，遵循的基本规则如下：

从一个基础镜像开始（FROM 指令指定），下一条指令将和该基础镜像的所有子镜像进行匹配，检查这些子镜像被创建时使用的指令是否和被检查的指令完全一样。如果不是，则缓存失效。
在大多数情况下，只需要简单地对比 Dockerfile 中的指令和子镜像。然而，有些指令需要更多的检查和解释。
对于 ADD 和 COPY 指令，镜像中对应文件的内容也会被检查，每个文件都会计算出一个校验和。文件的最后修改时间和最后访问时间不会纳入校验。在缓存的查找过程中，
会将这些校验和和已存在镜像中的文件校验和进行对比。如果文件有任何改变，比如内容和元数据，则缓存失效。
除了 ADD 和 COPY 指令，缓存匹配过程不会查看临时容器中的文件来决定缓存是否匹配。例如，当执行完 RUN apt-get -y update 指令后，容器中一些文件被更新，
但 Docker 不会检查这些文件。这种情况下，只有指令字符串本身被用来匹配缓存。
一旦缓存失效，所有后续的 Dockerfile 指令都将产生新的镜像，缓存不会被使用。
