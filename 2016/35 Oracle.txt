
Oracle

***********************************************************************
Oracle数据库组成
	表空间、段、区、数据块
	
	表空间：oracle中最大的逻辑存储结构；
		表空间与物理上的数据文件相对应，一个表空间可以对应多个数据文件，但是一个数据文件只能对应一个表空间；
		一个表空间的大小等于构成该表空间的所有数据文件大小的总和；

	自动创建的表空间：SYSTEM、SYSAUX、TEMP、EXAMPLE、UNDOTBS1、USERS；

	段：oracle中的一组盘区，这组盘区组成了被oracle视为一个单位的数据库对象，例如表或索引。
		因此，段一般是数据库终端用户将处理的最小存储单位；
		按照段中所存储数据的特征，可以将段分为5种类型：数据段、索引段、临时段、LOB段和回退段；
	
	区：磁盘空间分配的最小单位；区由一个或多个数据块组成，一个或多个区组成段；

	数据块：用来管理存储空间的最基本单位，也是最小的逻辑存储单位；
		oracle数据库是以块为单位进行逻辑读写操作的；

索引的使用
	1、为经常出现在关键字order by、group by、distinct后面的字段，查询的字段、表连接的字段上建立索引。
		在这些字段上建立索引，可以有效地避免排序操作。如果建立的是复合索引，索引的字段顺序要和这些关键字后面的字段顺序一致，否则索引不会被使用。
	
Oracle sql优化
	1、oracle 3种优化器：rule（规则）、cost（成本）、choose（选择）；
		为了使用基于成本的优化器，你必需经常运行analyze；
		
	2、基表的选择（只在基于规则的优化器中有效）
		 from 表（2个表） 中最右边的先被解析，因此最右边的是基础表，from 表（3个表） 中，被其他两个表引用的表是基础表；
		 在CBO中，优化器会检查sql语句中的每个表的物理大小、索引状态，然后选用花费最低的执行路径；
		 
	3、where子句中的连接顺序
		oracle采用自下而上的顺序解析where子句，因此，表之间的连接必需写在其他where条件之前，哪些可以过滤掉最大数据记录的条件
			必需写在where子句末尾；
	
	4、为经常出现在关键字order by、group by、distinct后面的字段，查询的字段、表连接的字段上建立索引。
		在这些字段上建立索引，可以有效地避免排序操作。如果建立的是复合索引，索引的字段顺序要和这些关键字后面的字段顺序一致，否则索引不会被使用。
	
	5、索引失效：运算、通配符、is null/is not null、NOT
	
	6、用where子句替换having子句；
	
	7、减少访问数据库的次数；
	
	13、通过内部函数function提高sql效率；
	
	14、使用别名alias；
	
	16.2、explain plan分析sql语句
		执行顺序，从内到外，从上到下，同一层次，操作号小的先执行；
		nested loop不按照上述规则执行，而是直接看操作号，操作号小的先执行；
		
		Cardinality基数、执行计划、统计信息、filter/access
		
	17、用索引提高效率；
		定期重构索引：alter index indexName rebuild tableSpaceName；
		
		大多数情况下，优化器通过where子句访问索引；
		
		where子句中，
			索引失效：运算、通配符、is null/is not null、NOT
			
			如果索引所对应的值的第一个字符通配符（%、_等）开始，或者对索引运算（SAL*12 > 2500），
			或者索引列是函数的一部分，或者在索引上使用NOT，或者在索引上使用is null或is not null，
			或者改变索引类型（to_char(indexName)），索引将不被采用；
			强制索引失效：索引 + 0 = 10；索引||'' = 'A';
		
	24、避免在索引上使用NOT
		当oracle遇到NOT，他会停止使用索引转而执行全表扫描；
		注意：在某些时候，oracle优化器会自动将NOT转化为相应的操作符；
	
	25、用>=替代>（对索引比较的情况下）；
	
	39、总是使用索引的第一个列
		如果索引是建立在多个列上，只有在它的第一个列被where子句引用时，优化器才会选择使用该索引；
		
	42、使用hints
		对于表的访问，可以使用两种hints：full和rowid；
		select /*+full(emp)*/ * from emp where empno = 7893;
		通常，你需要采用table access by rowid的方式特别是当访问大表的时候，使用这种方式，你需要知道rowid或使用索引；
		如果一个大表没有被设定为缓存（CACHED）表而你希望它的数据在查询结束时仍然停留在SGA中，
		你就可以使用CACHE hint来告诉优化器把数据保留在SGA中，通常CACHE hint和full hint一起使用； 
		select /*+full(worker) cache(worker)*/ * from work;
		
		如果该索引的重复值过多而你的优化器是CBO，优化器就可能忽略索引，这种情况下，你可以使用hint强制索引；
		
		oracle hints还包括：all_rows, first_rows, rule, use_nl, use_merge, use_hash等等；
		
		并非任何时候Hint都起作用，如果CBO认为使用Hint会导致错误的结果，Hint将被忽略；
			e.g.：select /*+ index(table_name index_name)*/ count(1) from table_name，如果index_name中可能有空值，Hint将被忽略，因为走索引得到值将缺少；
		
********************************************************************************************************************
********************************************************************************************************************
	
delete操作
	delete操作会消耗大量的CPU资源和产生大量的I/O，同时还会产生大量的undo数据；
	delete操作并不能释放出空间，也就是说，删除了哪个表的数据，腾出的空间还只能是哪个表使用，并不能让给其他的对象使用，
		因为delete操作并不能使表的高水位线下降。
	delete操作只适用于删除非常少量的数据，并且需要在有索引存在的情况下使用。
		在没有索引的情况下按照条件删除数据，即使删除的数据量非常少，Oracle也会将全表扫描一遍；

锁和阻塞
	TM锁：表级锁，上了锁后不能进行DDL操作；
	TX锁：行级锁，事务锁；
		当Oracle执行DML语句时，系统自动在所要操作的表上申请TM类型的锁。当TM锁获得后，系统再自动申请TX类型的锁，
			并将实际锁定的数据行的锁标志位进行置位。这样在事务加锁前检查TX锁相容性时就不用再逐行检查锁标志，
			而只需检查TM锁模式的相容性即可，大大提高了系统的效率。
			
	update会阻塞
	v$lock
	
如果你的系统有主、外键引用关系，并且满足以下三个条件中的任意一个，那么应该考虑给外键创建索引。
	a、主表上有频繁的删除操作；
	b、主键上有频繁的修改操作；
	c、业务上经常出现主表、从表的关联查询；
	
latch和等待
	1、共享池中的latch争用；
	2、数据缓冲池中的latch争用；
	
	select * from v$latchname where name like 'library cache%';
	
	共享池中如果存在大量的SQL被反复分析，就会造成很大的latch争用和长时间的等待，最常见的现象是没有绑定变量；
	
	数据缓冲池latch争用：
		访问频率非常高的数据库被称为热块，当很多用户一起去访问某几个数据库时，就会导致一些latch争用，常见的latch争用有：
		
		buffer busy waits：当一个会话需要访问一个数据块，而这个数据块正在被另外一个用户从磁盘读取到内存中或者这个数据块正在被
			另一个会话修改，当前的会话就需要等待，就会产生一个buffer busy waits等待；
		
		cache buffer chain：当一个会话需要去访问一个内存块时，它首先要去一个像链表一样的结构中去搜索这个数据块是否在内存中，
			当会话访问这个链表时需要获得一个latch，如果失败，将会产生latch cache buffer chain等待，导致这个等待的原因是访问
			相同数据块的会话太多或者这个列表太长（读到内存中的数据块太多）；
	
	产生latch争用的直接原因是太多会话去访问相同的数据块导致热块问题，造成热块的原因可能是数据块设置导致或者是重复执行的sql
		频繁访问一些相同数据块导致；
		
	热块产生的原因不尽相同，按照数据块的类型，可以分成以下几种热块类型，不同热块类型处理的方式都是不同的：
		a、表数据块：一些小表，频繁地查询/修改；
			如果表不太大，可以考虑将表数据分布在更多的数据块上，减少数据块被多数会话同时访问的频率，但会降低查询性能；
			alter table minimize records_per_block;
	
		b、索引数据块：如果主键索引是sequence递增的1、2、3...，由于这些键值分布得非常接近，当RAC的不同实例访问时会造成数据块的争用；
			使用反向索引：create index index_name on table_name(column_name) reverse;
	
		c、索引根数据块：B树索引，访问子节点索引都会扫描根节点，造成根节点被频繁访问，可以用分区索引，一棵树就被分成多棵树了；
		
		d、文件头数据块；
		
	
分区
	分区：范围分区（过期化处理）、列表分区（按字段值分区）、哈希分区（数据均匀分布）、组合分区；
	
	比较：
		范围比较，返回小数据量时，哈希分区优，大范围范围分区优；
		等于表达式时，哈希分区优；
		
索引
	索引：B树索引、位图索引、全文索引；

	B树索引：适合重复性比较低的字段，唯一性的字段性能尤其快；
	位图索引：适合重复率高的字段，适合count、AND/OR等操作，但不适合写操作，会对关联的记录上锁；
	
	表的连接、索引、分区：
	表的访问方式：全表扫描、rowid扫描、索引扫描（索引唯一、索引范围、索引全扫、索引快速、索引跳跃）
		连接类型：排序-合并、嵌套循环、哈希连接
			哈希连接：只适用于等值连接；
			嵌套循环：适合小数量级的连接；
	
	索引扫描的几种类型：索引唯一扫描、索引范围扫描、索引全扫描、索引跳跃扫描、索引快速扫描；
	
	索引跳跃扫描：为解决组合索引中第一个索引列不再条件中而被优化器拒绝使用索引的问题，以及解决组合索引中间列没有在条件中而导致扫描数据量增加的问题，
		我们必须搜集大量的数据读取类型，并对这些类型所使用到的列进行综合分析，创建出最优的索引，以确保查询条件中所使用到的列最大限度地连续使用“=”运算符。
	索引快速扫描：索引快速扫描每次I/O读取的是多个数据块，这也是该方式与索引全扫描之间的主要区别。
	
数据块三范式
	第一范式：1NF是对属性的原子性约束，要求属性具有原子性，不可再分解； 
　　第二范式：2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性； 
　　第三范式：3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余。 
	
select * from (select rownum no,id,name from student where rownum<=3 ) where no >=2;
	
	
	
	
	
	
	
	
	
	