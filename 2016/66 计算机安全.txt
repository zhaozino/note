
***********************************************************************

计算机网络上的通信面临以下4种威胁
	1、截获：攻击者从网络上窃听他人的通信内容；
	2、中断：攻击者有意中断他人在网络上的通信；
	3、篡改：攻击者故意篡改网络上传送的报文；
	4、伪造：攻击者伪造信息在网络上的传送；
	
主动攻击：中断、篡改、伪造；
被动攻击：截获；

主动攻击类型：
	1、更改报文流：包括对通过连接的PDU的真实性、完整性和有序性的攻击；
	2、拒绝服务：指攻击者向因特网上的服务器不停地发送大量分组，使因特网或服务器无法提供正常服务；
		即拒绝服务Dos(Denial of Service)；若从因特网上的成百上千的网站集中攻击一个网站，则称为
		分布式拒绝服务DDoS(Distributed Denial of Service)，或称为网络带宽攻击/连通性攻击；
	3、伪造连接初始化：攻击者重放以前已被记录的合法连接初始化序列，或者伪造身份而企图建立连接；
	4、恶意程序：
		计算机病毒：一种会传染其他程序的程序，通过修改其他程序来把自身或其变种复制进去完成；
		计算机蠕虫：一种通过网络的通信功能将自身从一个节点发送到另一个节点并自动启动运行的程序；
		特洛伊木马：他执行的功能并非所声称的功能而是某种恶意的功能。如一个编译程序除了执行编译任务
			外，还把用户的程序偷偷地拷贝下来，则这种编译程序就是一种特洛伊木马；
		逻辑炸弹：一种当运行环境满足某种特定条件时执行其他特殊功能的程序；
	
计算机网络通信安全的五个目标：
	1、防止析出报文内容；
	2、防止流量分析；
	3、检测更改报文流；
	4、检测拒绝报文服务；
	5、检测伪造初始化连接；
	
对于被动攻击可采用各种数据加密技术，而对付主动攻击，则需要加密技术与适当的鉴别技术相组合；

计算机网络安全主要有以下一些内容：
	1、保密性；
	2、安全协议的设计；
	3、访问控制；
	
秘钥体制：
	对称秘钥：加密秘钥与解密秘钥是相同的密码体制，即相同的秘钥，DES等；
	公钥私钥：

数字签名：一般用私钥签名；
	
鉴别：验证通信的对方的确是自己所要通信的对象，而不是其他的冒充者；
	报文鉴别：所收到的报文的确是报文的发送者所发送的，而不是其他人伪造或篡改的；
	实体鉴别：实体可以是一个人，也可以是一个进程；
	
	报文鉴别的方法：
		报文摘要MD：A把较长的报文X经过报文摘要算法运算后得出很短的报文摘要H。然后用自己的私钥对H进行D运算，
		即进行数字签名。得出已签名的报文摘要D(H)后，并将其追加在报文X后面发送给B。B收到报文后首先把已签名
		的D(H)和报文X分离，然后再做两件事，1：用A的公钥对D(H)进行E运算，得出报文摘要H。2：对报文X进行报文
		摘要运算，看是否能够得出同样的报文摘要H。如一样，就能以极高的概率断定收到的报文是A产生的，否则不是；
		报文摘要算法：MD5等；
		
	实体鉴别：在系统接入的全部持续时间内对和自己通信的对方实体只需验证一次；
		1、A向远端的B发送有自己的身份和口令的报文，并用双方约定好的共享对称秘钥K进行加密，B收到后解密，鉴别A；
			问题：入侵者C从网络上截获A发给B的报文，C并不需要破译这个报文，直接再发送给B，B就认为C是A，重放攻击；
			解决办法：策略2，不同的随机数；
		2、A首先用明文发送其身份A和一个不重数RA给B，接着，B响应A的查问，用共享秘钥K对RA加密后发回给A，同时也给
			出了自己的不重数RB，最后，A再响应B的查问，用共享秘钥K对RB加密后发回给B；A和B对不同的会话必须使用
			不同的不重数集，C就无法攻击；
	
秘钥的分配：
	对称秘钥分配存在的问题：
		1、如果n个人互相通信，需要n(n-1)个秘钥，每两个人共享一个秘钥，即n(n-1)/2个秘钥，这个数很大；
		2、怎样安全地得到共享的秘钥？因为网络不安全；
		
		目前常用的秘钥分配方式是设立秘钥分配中心KDC；
			A和B在KDC登记时就已经在KDC的服务器上安装了各自和KDC进行通信的主秘钥KA和KB，简称秘钥；
		流程：
			1、A向KDC发送用明文，说明向和用户B通信，明文中给出A和B在KDC登记的身份；
			2、KDC用随机数产生“一次一密”的会话秘钥K供A和B的这次会话使用，然后向A发送回答报文；
				这个回答报文用A的秘钥KA加密，包含有这次会话使用的秘钥K和请A转给B的一个票据，它包含
				A和B在KDC登记的身份，以及这次会话将要使用的秘钥K。这个票据用B的秘钥KB加密，因此A无法
				知道此票据的内容。
			3、当B收到A转来的票据并使用自己的秘钥KB解密后，就知道A要和他通信，同时也知道KDC为这次和A
				通信所分配的会话秘钥KAB。
			4、此后，A和B就可以使用会话秘钥K进行通信了；注意，在网络上传送秘钥时，都是经过加密的，解密
				用的秘钥都不在网上传送；
			5、KDC还可在报文中加入时间戳，以防止报文的截取者利用以前已记录下的报文进行重放攻击。会话秘钥K
				是一次性的，因此保密性较高；而KDC分配给用户的秘钥KA和KB，都应定期更换以减少攻击者破译秘钥
				的机会；
	非对称秘钥的分配
		公钥私钥是通过CA机构来分配的，任何用户都可以可信的地方（如代表政府的报纸）获得CA的公钥，用此公钥向
		CA查询某个公钥是否为某个实体所拥有的；
		
安全协议
	网络层的安全协议：IPsec与安全关联SA、鉴别首部协议AH、封装安全有效载荷协议ESP；
	
	运输层安全协议：SSL；
	
	应用层安全协议：PGP、PEM；
	
链路加密、端到端加密

防火墙
	防火墙是一种特殊编程的路由器，安装在一个网点和网络的其余部分之间，目的是实施访问控制策略。

1、XSS(Cross-Site Scripting)，跨站脚本攻击；
	访问的页面中有恶意脚本，比如盗取cookie，展示虚假输入表单骗取用户信息；
	将恶意脚本作为评论内容存储到后台db，用户浏览评论时，脚本会被执行，如alert(3)；
	
	防御：CSP白名单，开发者明确告诉浏览器哪些外部资源可以加载和执行；
	转义字符：最普遍的做法就是转义输入输出的内容，对于引号、尖括号、斜杠进行转义；
	HttpOnly Cookie：设置cookie属性为HttpOnly，js脚本将无法查询cookie，但request.getCookie()可以获取；
	
2、CSRF(Cross Site Request Forgery)，即跨站请求伪造，它利用用户已登录的身份，在用户毫不知情的情况下，以用户的名义完成非法操作；
	用户登录了A网站，在访问B网站时，B网站的js自动访问了A，执行了比如转账等恶意操作；
	1) SameSite
	可以对 Cookie 设置 SameSite 属性。该属性表示 Cookie 不随着跨域请求发送，可以很大程度减少 CSRF 的攻击，但是该属性目前并不是所有浏览器都兼容。
	2) Referer Check
	HTTP Referer是header的一部分，当浏览器向web服务器发送请求时，一般会带上Referer信息告诉服务器是从哪个页面链接过来的，服务器籍此可以获得一些信息用于处理。
	可以通过检查请求的来源来防御CSRF攻击。正常请求的referer具有一定规律，如在提交表单的referer必定是在该页面发起的请求。所以通过检查http包头referer的值是不是这个页面，
	来判断是不是CSRF攻击。
	但在某些情况下如从https跳转到http，浏览器处于安全考虑，不会发送referer，服务器就无法进行check了。若与该网站同域的其他网站有XSS漏洞，
	那么攻击者可以在其他网站注入恶意脚本，受害者进入了此类同域的网址，也会遭受攻击。出于以上原因，无法完全依赖Referer Check作为防御CSRF的主要手段。
	但是可以通过Referer Check来监控CSRF攻击的发生。
	3) Anti CSRF Token
	目前比较完善的解决方案是加入Anti-CSRF-Token。即发送请求时在HTTP 请求中以参数的形式加入一个随机产生的token，并在服务器建立一个拦截器来验证这个token。
	服务器读取浏览器当前域cookie中这个token值，会进行校验该请求当中的token和cookie当中的token值是否都存在且相等，才认为这是合法的请求。否则认为这次请求是违法的，
	拒绝该次服务。
	这种方法相比Referer检查要安全很多，token可以在用户登陆后产生并放于session或cookie中，然后在每次请求时服务器把token从session或cookie中拿出，
	与本次请求中的token 进行比对。由于token的存在，攻击者无法再构造出一个完整的URL实施CSRF攻击。但在处理多个页面共存问题时，当某个页面消耗掉token后，
	其他页面的表单保存的还是被消耗掉的那个token，其他页面的表单提交时会出现token错误。
	4) 验证码
	应用程序和用户进行交互过程中，特别是账户交易这种核心步骤，强制用户输入验证码，才能完成最终请求。在通常情况下，验证码够很好地遏制CSRF攻击。
	但增加验证码降低了用户的体验，网站不能给所有的操作都加上验证码。所以只能将验证码作为一种辅助手段，在关键业务点设置验证码。
		
3、点击劫持：点击劫持是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过 iframe 嵌套的方式嵌入自己的网页中，并将 iframe 设置为透明，在页面中透出一个按钮诱导用户点击。
	用户在登陆 A 网站的系统后，被攻击者诱惑打开第三方网站，而第三方网站通过 iframe 引入了 A 网站的页面内容，用户在第三方网站中点击某个按钮（被装饰的按钮），实际上是点击了 A 网站的按钮。
	1）X-FRAME-OPTIONS
	X-FRAME-OPTIONS是一个 HTTP 响应头，在现代浏览器有一个很好的支持。这个 HTTP 响应头 就是为了防御用 iframe 嵌套的点击劫持攻击。
	该响应头有三个值可选，分别是
	DENY，表示页面不允许通过 iframe 的方式展示
	SAMEORIGIN，表示页面可以在相同域名下通过 iframe 的方式展示
	ALLOW-FROM，表示页面可以在指定来源的 iframe 中展示
	2）JavaScript 防御
	对于某些远古浏览器来说，并不能支持上面的这种方式，那我们只有通过 JS 的方式来防御点击劫持了。
	
4、URL跳转漏洞：借助未验证的URL跳转，将应用程序引导到不安全的第三方区域，从而导致的安全问题。
	1)referer的限制
	如果确定传递URL参数进入的来源，我们可以通过该方式实现安全限制，保证该URL的有效性，避免恶意用户自己生成跳转链接
	2)加入有效性验证Token
	我们保证所有生成的链接都是来自于我们可信域的，通过在生成的链接里加入用户不可控的Token对生成的链接进行校验，可以避免用户生成自己的恶意链接从而被利用，
	但是如果功能本身要求比较开放，可能导致有一定的限制。

5、SQL注入；

6、OS命令注入攻击：OS命令注入和SQL注入差不多，只不过SQL注入是针对数据库的，而OS命令注入是针对操作系统的。





	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	