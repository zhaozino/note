
数据一致性的问题

1、分布式事务，2PC两阶段提交；
	缺点：性能、死锁；
	
2、无状态队列事务；
	采用消息队列和最终一致性来进行服务间解耦；
	优点：性能好、可扩展性高；
	案例：业务主动方，完成业务处理后，向业务被动方放松消息，允许消息丢失；
		业务被动方定时向业务主动发查询，恢复丢失的业务消息；
	
	原子性、一致性、隔离性、持久性；
	
3、事务补偿；
	
4、TCC；
	TRYING 阶段主要是对业务系统做检测及资源预留
	CONFIRMING 阶段主要是对业务系统做确认提交，TRYING阶段执行成功并开始执行CONFIRMING阶段时，
		默认CONFIRMING阶段是不会出错的。即：只要TRYING成功，CONFIRMING一定成功。
	CANCELING 阶段主要是在业务执行错误，需要回滚的状态下执行的业务取消，预留资源释放。
	而幂等性则是指业务方法调用一次与调用多次的执行返回结果是一样的。
	
	支付系统接收到会员的支付请求后，需要扣减会员账户余额、增加会员积分（暂时假设需要同步实现）增加商户账户余额
	再假设：会员系统、商户系统、积分系统是独立的三个子系统，无法通过传统的事务方式进行处理。
	TRYING阶段：我们需要做的就是会员资金账户的资金预留，即：冻结会员账户的金额（订单金额）
	CONFIRMING阶段：我们需要做的就是会员积分账户增加积分余额，商户账户增加账户余额
	CANCELING阶段：该阶段需要执行的就是解冻释放我们扣减的会员余额
	
CAP定理：
	对于共享数据系统，只能同时满足一下三项的两项；
	1、一致性(Consistency)：所有用户看到一致的数据；
	2、可用性(Availability)：总能找到一个可用的数据副本；
	3、分区容忍性(Tolerance to NetWork Partition)：即使系统被分区的情况下，仍能满足上面两点；
	
BASE理论：
	1、基本可用性(Basic Availability)；
	2、柔性状态(Soft state)；
	3、最终一致性(Eventuall consistency)；
	
幂等操作
	重复调用多次产生的业务结果与调用一次产生的业务结果相同；
	实现方式
		1、通过业务本身实现；
		2、系统缓存请求的结果，重复请求时返回缓存的结果；
		



