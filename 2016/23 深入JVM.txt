Threadlocal
ConcurrentHashmap
java多线程框架
java类加载器、类加载过程

什么情况下对象会存到栈里？

假设定义一个局部变量
Integer a = new Integer(3);//这个是存在哪里

***********************************************************************

深入JVM

1、垃圾回收：在空闲时间以不定时的方式动态回收无任何引用的对象占据的内存空间；

2、描述下JVM的基本结构：
	类加载子系统从文件系统或网络中加载Class信息，加载的类信息存放于方法区，
		方法区中还存放着运行时常量池，包括字符串字面量和数字常量；
	几乎所有的java对象实例都存放于java堆中，堆空间是所有线程共享的；
	NIO允许程序使用直接内存；
	每个java虚拟机线程都有一个私有的java栈，保存着局部变量、方法参数，同时和方法的调用、返回密切相关；
	本地方法栈用于本地方法的调用；
	PC寄存器指向当前正在执行的指令，是每个线程私有的空间；

3、java堆的结构(新生代/老年代)
	根据垃圾回收的机制不同，java堆有可能拥有不同的结构，最为常见的一种结构是将整个java堆分为新生代和老年代；
	新生代：存放着新生对象或年龄不大的对象，可能分为eden区、s0区、s1区；
		s0、s1也被称为from和to区域，他们是两块大小相等、可以互换角色的内存空间。
	老年代：存放着老年对象；
	
	在绝大多数情况下，对象首先分配在eden区，在一次新生代回收后，如果对象还活着，则会进入s0或者s1，之后，
		每经过一次新生代回收，对象如果存活，他的年龄就会加1，当对象的年龄达到一定条件后，就会被认为是老年对象，
		从而进入老年代；
	
4、JVM常用的参数配置：堆、栈、方法区、直接内存；
	-Xms5m：初始堆空间5M；
	-Xmx32m：最大堆空间32M；
	-Xss：最大栈空间；
	-XX:PermSize：初始方法区(永久区)；
	-XX:MaxPermSize：最大方法区(永久区)；动态代理，可能会在运行时产生大量的类，方法区可能会溢出；
	-XX:MaxDirectMemorySize：最大直接内存，默认为最大堆-Xmx；
	
	-Xmn：设置新生代的大小；
	-XX:SurvivorRatio：设置新生代中eden空间和from/to空间的比例关系；
	-XX:NewRatio：老年代/新生代的比例；
	
	-XX:+PrintGC：打印GC日志；
	-XX:+PrintGCDetail：打印GC详细日志；
	-XX:+PrintGCTimeStamps：打印GC发生的时间；
	-XX:+PrintGCApplicationConcurrentTime：打印应用程序的执行时间；
	-XX:+PrintGCApplicationStoppedTime：打印应用程序由于GC停顿的时间；
	-XX:+PrintReferenceGC：跟踪系统内的软引用、弱引用、虚引用、Finallize队列；
	
	-verbose:class：跟踪类的加载和卸载；
	-XX:+TraceClassLoading：跟踪类的加载；
	-XX:+TraceClassUnloading：跟踪类的卸载；
	
	-XX:+PrintVMOptions：打印虚拟机接受到的命令行显式参数；
	-XX:+PrintCommandLineFlags：打印传递给虚拟机的显式和隐式参数
	
	-XX:+PrintGCDetails:
		new generation：新生代；
		Tenured generation：老年代；
		compacting perm gen: 永久区；
	
5、常用的垃圾回收算法：引用计数法、标记清除法、复制算法、标记压缩法、分代/分区思想；
	
	可达对象：通过根对象进行搜索，最终可以达到的对象；
	不可达对象：通过根对象进行搜索，最终没有被引用的对象；
	
	GC Root对象：
		1、栈中引用的对象，引用是在栈帧的本地变量表中，真正的对象在堆中；
		2、方法区perm中的类静态属性引用的对象，以及常量引用的对象；
		3、本地方法栈中JNI的引用对象；
		
	1)、引用计数法
		任何一个对象引用了它，计数器就加1，当引用失效时，引用计数器就减1；
		缺点：1、无法处理循环引用的情况；2、计数器的加减对性能有一定影响；
		
	2)、标记清除法
		分为两个阶段：1、标记阶段；2、清除阶段；
		通过根节点，标记所有可达的对象；未被标记的就是垃圾对象，在清除阶段清除；
		缺点：产生碎片空间；
		
	3)、复制算法
		将原有的内存空间分为两块，每次使用其中的一块，将存活的对象复制到另一块中，并清空当前块；
		优点：如果存活对象比较少，则回收效率很高；空间没有碎片；
		缺点：内存空间使用率只有一半；
		案例：新生代串行垃圾回收器；
		
	4)、标记压缩法
		1、标记阶段；2、把标记的对象移到内存空间的一边，保持连续；3、清除；
		优点：没有碎片空间；
		案例：存活对象比较多的老年代的回收；
		
	5)、分代算法
		新生代对象朝生夕灭，90%会很快被回收，耗时比较短，使用复制算法；
		老年代对象回收频率比较低，耗时比较长，使用标记压缩法；
		
	6)、分区算法
		将整个堆空间划分成连续的不同的小空间，每个小空间独立使用、独立回收；
	
	引用和可触及性的强度：强引用、软引用、弱引用、虚引用；
		强引用：正常引用，不会被回收；
		软引用：堆空间不足时会被回收；
		弱引用：GC时，只要被发现，就会被回收；
		虚引用：和没有引用几乎是一样的，随时都可能被垃圾回收器回收；
	
	stop-the-world；在执行垃圾收集算法时，Java应用程序的其他所有除了垃圾收集帮助器线程之外的线程都被挂起；
	
6、常用的垃圾收集器：串行回收器、并行回收器、CMS回收器/标记清除算法（初始标记、并发标记、预清理、重新标记、并发清理、并发重置）、G1回收器/分代算法()；
	
	1)、串行回收器：SerialGC
		单线程、独占式，垃圾回收时，java程序中的线程都需要暂停，等待垃圾回收的完成；
		新生代复制算法，老年代标记压缩算法；
		1、仅使用单线程进行回收；
		2、独占式的垃圾回收 stop-the-world；
		案例：Client模式下默认的垃圾回收器；
		-XX:+UseSerialGC：新生代、老年代都用串行回收器；
		-XX:+UseParNewGC：新生代用ParNew回收器，老年代都用串行回收器；
		-XX:+UseParallelGC：新生代使用ParallelGC回收器，老年代使用串行回收器；
		
		DefNew: 单线程(single-threaded), 采用标记复制(mark-copy)算法的, 使整个JVM暂停运行(stop-the-world)的年轻代(Young generation) 垃圾收集器(garbage collector).
		
	2)、并行回收器：
		新生代复制算法，老年代标记压缩算法；
		1、使用多线程；
		3、独占式垃圾回收；
		
		ParNew回收器：
			ParNew回收器是一个工作在新生代的垃圾收集器。它只是简单地将串行回收器多线程化，它的回收策略、算法以及参数和新生代串行回收器一样；
			-XX:+UseParNewGC：新生代使用ParNew回收器，老年代使用串行回收器；
			-XX:+UseConcMarkSweepGC：新生代使用ParNew回收器，老年代使用CMS；
			ParNew回收器工作时的线程数量可以使用-XX:ParallelGCThreads参数指定，一般最后与CPU相当，但当CPU数目大于8时，建议：3+((5*CPU_count)/8);
		
		ParallelGC回收器：
			新生代ParallelGC回收器也是使用的复制算法的收集器，相比ParNew，它更关注系统的吞吐量；
			-XX:+UseParallelGC：新生代使用ParallelGC回收器，老年代使用串行回收器；
			-XX:+UseParallelOldGC：新生代使用ParallelGC回收器，老年代使用ParallelOldGC回收器；
			-XX:MaxGCPauseMillis：设置最大垃圾收集停顿时间；
			-XX:GCTimeRatio：设置吞吐量大小；
			-XX:+UseAdaptiveSizePolicy：打开自适应GC策略；
			日志：0.880：[GC [PSYoungGen：...]]
			
		ParallelOldGC老年代回收器：
			关注吞吐量，标记压缩算法；
			日志：0.880：[GC [PSYoungGen：...][ParOldGen:...]]
			
	3)、CMS回收器
		-XX:+UseConcMarkSweepGC：新生代使用ParNew回收器，老年代使用CMS；
		是以牺牲吞吐量为代价来获得最短回收停顿时间的垃圾回收器；
		整体上来说，CMS不是独占式的；
		1、多线程；
		2、标记清除算法；
		
		1、初始标记：独占，标记根对象；
		2、并发标记：标记所有对象；
		3、预清理：清理前准备，以及控制停顿时间；
		4、重新标记：独占，修正并发标记数据；
		5、并发清理：清理垃圾；
		6、并发重置；
		
		预清理
			预清理是并发的，除了为正式清理做准备和检查外，预清理还会尝试控制一次停顿时间。
			由于重新标记是独占CPU的，如果新生代GC发生后，立即触发一次重新标记，那么一次停顿
			时间可能很长，为了避免这种情况，预处理时，会刻意等待一次新生代GC的发生，然后根据
			历史性能数据预测下一次新生代GC可能发生的时间，然后在当前时间和预测时间的中间时刻
			进行重新标记，这样最大程度上避免新生代GC和重新标记重合，尽可能减少一次停顿时间；
			
	4)、G1回收器 java7开始有的
		-XX:+UseG1GC
		分代回收器
		流程：新生代GC、并发标记周期、混合收集、可能Full GC;
		并发标记
			1、初始标记：独占，标记从根节点直接可达的对象，会伴随一次新生代的GC；
			2、根区域扫描：
			3、并发标记；
			4、重新标记；
			5、独占清理；
			6、并发清理阶段；
		
	Full GC：老年代GC，Full会引起歧义；
	
	System.gc()
		默认情况下，System.gc()会显式直接触发Full GC(老年代GC)，同时也会对新生代GC；
		方法区满也会引起full GC；
		
	finalize()
		该方法从Object类继承而来。在从堆中永久删除对象之前，垃圾回收器调用该对象的Finalize方法。
		对象的所有引用都被释放，但能在finalize()函数中复活；
		注意，无法确切地保证垃圾回收器何时调用该方法，也无法保证调用不同对象的方法的顺序。
	
7、锁与并发
	在java虚拟机的实现中每个对象都有一个对象头，对象头中有一个称为Mark Word的部分，里面存放着锁的指针；
	
	锁的类型：偏向锁、轻量级锁、锁膨胀、自旋锁、锁消除；
	
	偏向锁：若程序没有竞争，则取消之前已经获得锁的线程同步操作；
		例如：若某一锁被线程获取后，便进入偏向锁模式，当线程再次请求这个锁时，无需再进行相关的同步操作，从而节省了时间；
		-XX:+UseBiasedLocking：启用偏向锁；
		偏向锁在锁竞争激烈的场合没有太强的优化效果，因为大量的竞争会导致持有锁的线程不停的切换，锁也很难一直保持偏向模式；
	
	轻量级锁
		如果偏向锁失败，java虚拟机会让线程申请轻量级锁，在虚拟机内部使用一个称为BasicObjectLock的对象实现；
		通过CAS，尝试将BasicLock地址复制到Mark Word；
		
	锁膨胀
		当轻量级锁失败，虚拟机就会使用重量级锁，Mark Word中有指向monitor对象的指针；
		
	自旋锁
		锁膨胀后，线程很可能会在操作系统层面被挂起来，这样线程上下文切换的性能损失就比较大。因此，锁膨胀后，
		虚拟机会做最后的争取，使用自旋锁，即执行一个空转，在若干个空循环后，线程如果可以获得锁，则继续执行，
		否则被挂起；
		
	锁消除
		java虚拟机在JIT编译时，通过对运行上下文的扫描，去除不可能存在的共享资源竞争的锁，可以节省请求锁的时间；
		如方法内声明的StringBuffer不会产生竞争，就会消除锁；
		-XX:+DoEscapeAnalysis：逃逸分析
		-XX:+EliminateLocks：锁消除
		
****************************************************************************************************************
	可重入锁/不可重入锁
		是否支持同一线程对同一个代码块重复加锁：线程A对代码块code加锁后，后续又重新走到这个代码块code进行加锁，如果支持重复加锁，就是可重入锁，否则不可重入；
		不可重入锁 + 递归，容易造成死锁，一般通过lockedBy + lockCount来实现可重入锁；
		
		public class Lock{ //不可重入
		    private boolean isLocked = false;
		    public synchronized void lock() throws InterruptedException{
			while(isLocked){    
			    wait();
			}
			isLocked = true;
		    }
		    public synchronized void unlock(){
			isLocked = false;
			notify();
		    }
		}
		
		public class Count{
		    Lock lock = new Lock();
		    public void print(){
			lock.lock();
			doAdd();
			lock.unlock();
		    }
		    public void doAdd(){
			lock.lock();
			//do something 被阻塞
			lock.unlock();
		    }
		}
		
		public class Lock{ //可重入锁
		    boolean isLocked = false;
		    Thread  lockedBy = null;
		    int lockedCount = 0;
		    public synchronized void lock()
			    throws InterruptedException{
			Thread thread = Thread.currentThread();
			while(isLocked && lockedBy != thread){
			    wait();
			}
			isLocked = true;
			lockedCount++;
			lockedBy = thread;
		    }
		    public synchronized void unlock(){
			if(Thread.currentThread() == this.lockedBy){
			    lockedCount--;
			    if(lockedCount == 0){
				isLocked = false;
				notify();
			    }
			}
		    }
		}
		
	锁在应用层的优化思路
		1、减少锁持有的时间；
		
		2、减小锁的粒度；
			如ConcurrentHashMap：会对每个hash值下的链表上个锁，即一个map对象，上很多小锁；
			
		3、锁分离：
			LinkedBlockingQueue：put一个锁，take一个锁；类似读写锁分离；
			
		4、锁粗化：
			虚拟机在遇到一连串连续地对同一锁不断进行请求和释放的操作时，便会把所有的锁操作整合成对锁的一次请求，
			从而减少对锁的请求同步次数；
			
	CAS：
		compareAndSet，更新前先看下值是否被其他的线程更改过，没有就执行，否则失败重试，底层调用JNI，执行CPU指令实现的；
		
	LongAddr：
		CAS + 锁粒度，即数据分段，每段一个cell锁；
		
	java内存模型
		1、原子型；
			在32位的java虚拟机系统中，对于long和double的赋值读取，由于long和double为64位，对它们的操作也都不是原子性的；
			例子：多个线程对一个变量赋值targetNo，你会发现打印出来的值有可能不是targetNo；
			解决办法：public static volatile long targetNo = 0;
			
		2、有序性：
			为了保证指令流水线的顺畅执行，在指令执行时，有可能会对目标指令进行重排；重排不会导致单线程中的语义修改，
				但会导致多线程中的语义出现不一致。
			解决办法：synchronized；
			
		3、可见性：
			指当一个线程修改了一个变量的值，在另外一个线程中可以马上得知这个修改；
			指令重排、系统编译器优化，部分变量的值可能会被寄存器或高速缓冲缓存，而每个CPU都拥有独立的寄存器和Cache，
				从而导致其他线程无法立即发现这个修改；
				
			public class VolatileTest{
				public static class MyThread extends Thread{
					private boolean stop = false;
					public void stopMe(){
						stop = true;
					}
					
					public void run(){
						int i = 0;
						while(!stop){
							i++;
						}
					}
				}
				
				public static void main(String[] args){
					MyThread t = new MyThread();
					t.start();
					Thread.sleep(1000);
					t.stopMe();
					Thread.sleep(1000);
				}
			}
			主线程修改子线程的属性，子线程不会发现属性改变，所以无法停止子线程的；
			
			解决办法：
				1、private volatile boolean stop = false;
				2、synchronized stopMe()、synchronized stoped();
		
	
**************************************************************************************************************************************
	
压力测试工具：JMetter；

性能监控工具：top、vmstat
	
-server -Xmx2g -Xms2g -Xmn256m -XX:PermSize=128m -Xss256k -XX:+DisableExplicitGC -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:LargePageSizeInBytes=128m -XX:+UseFastAccessorMethods -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 "

-Xmx2g
-Xms2g
-Xmn256m
-XX:PermSize=128m
-Xss256k
-XX:+DisableExplicitGC：自动将System.gc()调用转换成一个空操作，防止滥用System.gc();
-XX:+UseConcMarkSweepGC：使用CMS回收器
-XX:+CMSParallelRemarkEnabled：开启并行remark；
-XX:+UseCMSCompactAtFullCollection：使CMS在垃圾收集完成后，进行一次内存碎片整理，即空间压缩，因为CMS默认不压缩空间的。
-XX:LargePageSizeInBytes=128m，设置堆内存的内存页大小
-XX:+UseFastAccessorMethods，优化原始类型的getter方法性能
-XX:+UseCMSInitiatingOccupancyOnly：表示只在到达阀值的时候，才进行CMS GC
-XX:CMSInitiatingOccupancyFraction=70，指定当老年代空间使用率达到多少时，进行一次垃圾回收；

如果满足下面的指标，则一般不需要进行GC：
   Minor GC执行时间不到50ms；
   Minor GC执行不频繁，约10秒一次；
   Full GC执行时间不到1s；
   Full GC执行频率不算频繁，不低于10分钟1次；
   
**************************************************************************************************************************************
   
当年轻代内存满时，会引发一次普通GC，该GC仅回收年轻代。需要强调的时，年轻代满是指Eden代满，Survivor满不会引发GC
当年老代满时会引发Full GC，Full GC将会同时回收年轻代、年老代
当永久代满时也会引发Full GC，会导致Class、Method元信息的卸载

另一个问题是，何时会抛出OutOfMemoryException，并不是内存被耗空的时候才抛出
	1、JVM98%的时间都花费在内存回收
	2、每次回收的内存小于2%
	满足这两个条件将触发OutOfMemoryException，这将会留给系统一个微小的间隙以做一些Down之前的操作，比如手动打印Heap Dump。
	
二、内存泄漏及解决方法
 1.系统崩溃前的一些现象：
每次垃圾回收的时间越来越长，由之前的10ms延长到50ms左右，FullGC的时间也有之前的0.5s延长到4、5s
FullGC的次数越来越多，最频繁时隔不到1分钟就进行一次FullGC
年老代的内存越来越大并且每次FullGC后年老代没有内存被释放
 之后系统会无法响应新的请求，逐渐到达OutOfMemoryError的临界值。
 
 2.生成堆的dump文件
 通过JMX的MBean生成当前的Heap信息，大小为一个3G（整个堆的大小）的hprof文件，如果没有启动JMX可以通过Java的jmap命令来生成该文件。
 
 3.分析dump文件
 下面要考虑的是如何打开这个3G的堆信息文件，显然一般的Window系统没有这么大的内存，必须借助高配置的Linux。当然我们可以借助X-Window把Linux上的图形导入到Window。我们考虑用下面几种工具打开该文件：
Visual VM
IBM HeapAnalyzer
JDK 自带的Hprof工具
 使用这些工具时为了确保加载速度，建议设置最大内存为6G。使用后发现，这些工具都无法直观地观察到内存泄漏，Visual VM虽能观察到对象大小，但看不到调用堆栈；HeapAnalyzer虽然能看到调用堆栈，却无法正确打开一个3G的文件。因此，我们又选用了Eclipse专门的静态内存分析工具：Mat。
 
 4.分析内存泄漏
 通过Mat我们能清楚地看到，哪些对象被怀疑为内存泄漏，哪些对象占的空间最大及对象的调用关系。针对本案，在ThreadLocal中有很多的JbpmContext实例，经过调查是JBPM的Context没有关闭所致。
 另，通过Mat或JMX我们还可以分析线程状态，可以观察到线程被阻塞在哪个对象上，从而判断系统的瓶颈。
 
 5.回归问题
   Q：为什么崩溃前垃圾回收的时间越来越长？
   A:根据内存模型和垃圾回收算法，垃圾回收分两部分：内存标记、清除（复制），标记部分只要内存大小固定时间是不变的，变的是复制部分，因为每次垃圾回收都有一些回收不掉的内存，所以增加了复制量，导致时间延长。所以，垃圾回收的时间也可以作为判断内存泄漏的依据
   Q：为什么Full GC的次数越来越多？
   A：因此内存的积累，逐渐耗尽了年老代的内存，导致新对象分配没有更多的空间，从而导致频繁的垃圾回收
   Q:为什么年老代占用的内存越来越大？
   A:因为年轻代的内存无法被回收，越来越多地被Copy到年老代
   
3.JVM参数
    在JVM启动参数中，可以设置跟内存、垃圾回收相关的一些参数设置，默认情况不做任何设置JVM会工作的很好，但对一些配置很好的Server和具体的应用必须仔细调优才能获得最佳性能。通过设置我们希望达到一些目标：
GC的时间足够的小
GC的次数足够的少
发生Full GC的周期足够的长
  前两个目前是相悖的，要想GC时间小必须要一个更小的堆，要保证GC次数足够少，必须保证一个更大的堆，我们只能取其平衡。
   （1）针对JVM堆的设置，一般可以通过-Xms -Xmx限定其最小、最大值，为了防止垃圾收集器在最小、最大之间收缩堆而产生额外的时间，我们通常把最大、最小设置为相同的值
   （2）年轻代和年老代将根据默认的比例（1：2）分配堆内存，可以通过调整二者之间的比率NewRadio来调整二者之间的大小，也可以针对回收代，比如年轻代，通过 -XX:newSize -XX:MaxNewSize来设置其绝对大小。同样，为了防止年轻代的堆收缩，我们通常会把-XX:newSize -XX:MaxNewSize设置为同样大小
   （3）年轻代和年老代设置多大才算合理？这个我问题毫无疑问是没有答案的，否则也就不会有调优。我们观察一下二者大小变化有哪些影响
更大的年轻代必然导致更小的年老代，大的年轻代会延长普通GC的周期，但会增加每次GC的时间；小的年老代会导致更频繁的Full GC
更小的年轻代必然导致更大年老代，小的年轻代会导致普通GC很频繁，但每次的GC时间会更短；大的年老代会减少Full GC的频率
如何选择应该依赖应用程序对象生命周期的分布情况：如果应用存在大量的临时对象，应该选择更大的年轻代；如果存在相对较多的持久对象，年老代应该适当增大。但很多应用都没有这样明显的特性，在抉择时应该根据以下两点：（A）本着Full GC尽量少的原则，让年老代尽量缓存常用对象，JVM的默认比例1：2也是这个道理 （B）通过观察应用一段时间，看其他在峰值时年老代会占多少内存，在不影响Full GC的前提下，根据实际情况加大年轻代，比如可以把比例控制在1：1。但应该给年老代至少预留1/3的增长空间
  （4）在配置较好的机器上（比如多核、大内存），可以为年老代选择并行收集算法： -XX:+UseParallelOldGC ，默认为Serial收集
  （5）线程堆栈的设置：每个线程默认会开启1M的堆栈，用于存放栈帧、调用参数、局部变量等，对大多数应用而言这个默认值太了，一般256K就足用。理论上，在内存不变的情况下，减少每个线程的堆栈，可以产生更多的线程，但这实际上还受限于操作系统。
  （4）可以通过下面的参数打Heap Dump信息
-XX:HeapDumpPath
-XX:+PrintGCDetails
-XX:+PrintGCTimeStamps
-Xloggc:/usr/aaa/dump/heap_trace.txt
    通过下面参数可以控制OutOfMemoryError时打印堆的信息
-XX:+HeapDumpOnOutOfMemoryError
 请看一下一个时间的Java参数配置：（服务器：Linux 64Bit，8Core×16G）
 
 JAVA_OPTS="$JAVA_OPTS -server -Xms3G -Xmx3G -Xss256k -XX:PermSize=128m -XX:MaxPermSize=128m -XX:+UseParallelOldGC -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/aaa/dump -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:/usr/aaa/dump/heap_trace.txt -XX:NewSize=1G -XX:MaxNewSize=1G"
经过观察该配置非常稳定，每次普通GC的时间在10ms左右，Full GC基本不发生，或隔很长很长的时间才发生一次
通过分析dump文件可以发现，每个1小时都会发生一次Full GC，经过多方求证，只要在JVM中开启了JMX服务，JMX将会1小时执行一次Full GC以清除引用，关于这点请参考附件文档。
 4.程序算法调优：本次不作为重点
 
参考资料：
http://java.sun.com/javase/technologies/hotspot/gc/gc_tuning_6.html
来源：http://blog.csdn.net/chen77716/article/details/5695893
 
=======================================================================================
调优方法
一切都是为了这一步，调优，在调优之前，我们需要记住下面的原则：
 
1、多数的Java应用不需要在服务器上进行GC优化；
2、多数导致GC问题的Java应用，都不是因为我们参数设置错误，而是代码问题；
3、在应用上线之前，先考虑将机器的JVM参数设置到最优（最适合）；
4、减少创建对象的数量；
5、减少使用全局变量和大对象；
6、GC优化是到最后不得已才采用的手段；
7、在实际使用中，分析GC情况优化代码比优化GC参数要多得多；
 
GC优化的目的有两个（http://www.360doc.com/content/13/0305/10/15643_269388816.shtml）：
1、将转移到老年代的对象数量降低到最小；
2、减少full GC的执行时间；
 
为了达到上面的目的，一般地，你需要做的事情有：
1、减少使用全局变量和大对象；
2、调整新生代的大小到最合适；
3、设置老年代的大小为最合适；
4、选择合适的GC收集器；
 
在上面的4条方法中，用了几个“合适”，那究竟什么才算合适，一般的，请参考上面“收集器搭配”和“启动内存分配”两节中的建议。但这些建议不是万能的，需要根据您的机器和应用情况进行发展和变化，实际操作中，可以将两台机器分别设置成不同的GC参数，并且进行对比，选用那些确实提高了性能或减少了GC时间的参数。
 
真正熟练的使用GC调优，是建立在多次进行GC监控和调优的实战经验上的，进行监控和调优的一般步骤为：
1，监控GC的状态
使用各种JVM工具，查看当前日志，分析当前JVM参数设置，并且分析当前堆内存快照和gc日志，根据实际的各区域内存划分和GC执行时间，觉得是否进行优化；
 
2，分析结果，判断是否需要优化
如果各项参数设置合理，系统没有超时日志出现，GC频率不高，GC耗时不高，那么没有必要进行GC优化；如果GC时间超过1-3秒，或者频繁GC，则必须优化；
注：如果满足下面的指标，则一般不需要进行GC：
   Minor GC执行时间不到50ms；
   Minor GC执行不频繁，约10秒一次；
   Full GC执行时间不到1s；
   Full GC执行频率不算频繁，不低于10分钟1次；
 
3，调整GC类型和内存分配
如果内存分配过大或过小，或者采用的GC收集器比较慢，则应该优先调整这些参数，并且先找1台或几台机器进行beta，然后比较优化过的机器和没有优化的机器的性能对比，并有针对性的做出最后选择；
4，不断的分析和调整
通过不断的试验和试错，分析并找到最合适的参数
5，全面应用参数
如果找到了最合适的参数，则将这些参数应用到所有服务器，并进行后续跟踪。
 
 
调优实例
上面的内容都是纸上谈兵，下面我们以一些真实例子来进行说明：
实例1：
笔者昨日发现部分开发测试机器出现异常：java.lang.OutOfMemoryError: GC overhead limit exceeded，这个异常代表：
GC为了释放很小的空间却耗费了太多的时间，其原因一般有两个：1，堆太小，2，有死循环或大对象；
笔者首先排除了第2个原因，因为这个应用同时是在线上运行的，如果有问题，早就挂了。所以怀疑是这台机器中堆设置太小；
使用ps -ef |grep "java"查看，发现：
 
 
该应用的堆区设置只有768m，而机器内存有2g，机器上只跑这一个java应用，没有其他需要占用内存的地方。另外，这个应用比较大，需要占用的内存也比较多；
笔者通过上面的情况判断，只需要改变堆中各区域的大小设置即可，于是改成下面的情况：
 
 
跟踪运行情况发现，相关异常没有再出现；
 
实例2：（http://www.360doc.com/content/13/0305/10/15643_269388816.shtml）
一个服务系统，经常出现卡顿，分析原因，发现Full GC时间太长：
jstat -gcutil:
S0     S1    E     O       P        YGC YGCT FGC FGCT  GCT
12.16 0.00 5.18 63.78 20.32  54   2.047 5     6.946  8.993 
分析上面的数据，发现Young GC执行了54次，耗时2.047秒，每次Young GC耗时37ms，在正常范围，而Full GC执行了5次，耗时6.946秒，每次平均1.389s，数据显示出来的问题是：Full GC耗时较长，分析该系统的是指发现，NewRatio=9，也就是说，新生代和老生代大小之比为1:9，这就是问题的原因：
1，新生代太小，导致对象提前进入老年代，触发老年代发生Full GC；
2，老年代较大，进行Full GC时耗时较大；
优化的方法是调整NewRatio的值，调整到4，发现Full GC没有再发生，只有Young GC在执行。这就是把对象控制在新生代就清理掉，没有进入老年代（这种做法对一些应用是很有用的，但并不是对所有应用都要这么做）
 
实例3：
一应用在性能测试过程中，发现内存占用率很高，Full GC频繁，使用sudo -u admin -H  jmap -dump:format=b,file=文件名.hprof pid 来dump内存，生成dump文件，并使用Eclipse下的mat差距进行分析，发现：

 
从图中可以看出，这个线程存在问题，队列LinkedBlockingQueue所引用的大量对象并未释放，导致整个线程占用内存高达378m，此时通知开发人员进行代码优化，将相关对象释放掉即可。

jps：用于列出Java的进程；
jstat：查看堆的详情；
jinfo：可以用来查看正在运行的Java应用程序的扩展参数，甚至在运行时修改部分参数；
 	jinfo  <option>  <pid>
	jinfo -flag MaxTenuringThreshold 31518
	-XX:MaxTenuringThreshold=15
jmap：命令主要用于生成堆快照文件；
 	jmap -dump:format=b,file=heap.hprof 31531
	Dumping heap to /Users/caojie/heap.hprof ...
	Heap dump file created
jhat：工具可以分析Java应用程序的堆快照文件；
	jhat heap.hprof
jstack：可用于导出Java应用程序的线程堆栈信息；
	jstack -l <pid>
jstatd：命令是一个RMI服务器程序，它的作用相当于代理服务器，建立本地计算机与远程监控工具的通信，jstatd服务器能够将本机的Java应用程序信息传递到远程计算机；
hprof：工具可以用于监控Java应用程序在运行时的CPU信息和堆信息；
Visual VM：是一个功能强大的多合一故障诊断和性能监控的可视化工具，它集成了多种性能统计工具的功能，使用Visual VM可以替代jstat、jmap、jhat、jstack等工具。在命令行输入jvisualvm即可启动visualvm。
BTrace：是一款功能强大的性能检测工具，它可以在不停机的情况下，通过字节码注入，动态监控系统的运行情况，它可以跟踪指定的方法调用、构造函数调用和系统内存等信息；
MAT：是一款功能强大的Java堆内存分析器，可以用于查找内存泄露以及查看内存消耗情况；
