			
***********************************************************************

dubbo

1、简单介绍下dubbo；
	dubbo是一个分布式服务框架，提供高性能和透明化的RPC方案，提供软性的负载均衡，提供服务的动态注册/发现、监控中心，方便横向扩展；
	
3、描述下dubbo的架构：
	服务容器、服务提供者、服务消费者、注册中心、监控中心；
	0. 服务容器负责启动，加载，运行服务提供者。
	1. 提供者在启动时，向注册中心注册自己提供的服务。
	2. 消费者在启动时，向注册中心订阅自己所需的服务。
	3. 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。
	4. 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。
	5. 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。
	
4、简述下dubbo的代码实现，包括消费方和提供方：
	服务方：1、DubboNamespaceHandler；2、invoker = proxyFactory.getInvoker(ref, interfaceClass); 3、protocol.export(invoker);
	消费方：1、DubboNamespaceHandler；2、invokers = protocol.refer(interfaceClass, url)；3、invoker = cluster.join(new StaticDirectory(u, invokers)); 4、proxyFactory.getProxy(invoker);
	
	服务方：DubboNamespaceHandler > DubboBeanDefinitionParser > ServiceBean > ServiceConfig >
		1、proxyFactory.getInvoker(ref, interfaceClass, registryURL：JavassistProxyFactory(动态字节码) > getInvoker();
		2、protocol.export(invoker) > RegistryProtocol > exporter = doLocalExport(originInvoker) > dubboProtocol.export() > openServer(url)
			> Exchangers.bind(url, requestHandler) > reply();
		3、registry.register(registedProviderUrl);注册服务url；
	
	RegistryProtocol.export --> DubboProtocol.createServer --> Exchangers.bind(url, requestHandler) --> HeaderExchanger.bind(url, handler) --> NettyTransporter.bind(url, handler)
	
	消费方：DubboNamespaceHandler > DubboBeanDefinitionParser > ReferenceBean > ReferenceConfig > 
		1、invokers = protocol.refer(interfaceClass, url)
		2、registryProtocol.refer(...)
			registryFactory.getRegistry(url) > AbstractRegistryFactory.createRegistry(url) > ZookeeperRegistryFactory.createRegistry
			> zookeeperTransporter.connect(url)(连接zookeeper) > 
			RegistryDirectory.subscribe() > 消费者向zookeeper订阅服务
			FailoverCluster.join() > 返回invoker(InvokerDelegete(dubboInvoker));
		3、invoker = cluster.join(new StaticDirectory(u, invokers));
		4、proxyFactory.getProxy(invoker) > JavassistProxyFactory(动态字节码) > Proxy.getProxy(interfaces).newInstance(new InvokerInvocationHandler(invoker)):
			动态字节码，生成proxy代理，实现service接口的所有方法，统统用invoker来执行，即dubboInvoker，dubboInvoker里通过Netty进行网络通信；
	
	作服务的提供者，比服务使用方更清楚服务性能参数，如调用的超时时间，合理的重试次数，负载均衡，等等
	在Provider配置后，Consumer不配置则会使用Provider的配置值，即Provider配置可以作为Consumer的缺省值。
	否则，Consumer会使用Consumer端的全局设置，这对于Provider不可控的，并且往往是不合理的。
	PS: 配置的覆盖规则：1) 方法级配置别优于接口级别，即小Scope优先 2) Consumer端配置 优于 Provider配置 优于 全局配置，最后是Dubbo Hard Code的配置值（见配置文档）
	
	SPI：protocol、transporter、monitor；
	
4.2、Dubbo的配置模块：application、module、registry、monitor、protocol、provider、consumer、service、reference、annotation；
	
4.3、dubbo的10个层：
	1、service：interface、implement. //服务接口、实现；
	2、config：配置层，对外配置接口，以ServiceConfig, ReferenceConfig为中心
	3、proxy：服务代理层，服务接口透明代理，生成服务的客户端Stub和服务器端Skeleton，以ServiceProxy为中心，扩展接口为ProxyFactory
		服务端：Invoker<?> invoker = proxyFactory.getInvoker(ref);//ref服务接口的实现类，//服务端proxyFactory.getInvoker(ref, interfaceClass, url), protocol.export(invoker);
		        Exporter<?> exporter = protocol.export(invoker);
		消费端：invoker = protocol.refer(interfaceClass, url);
			    proxy = proxyFactory.getProxy(invoker);
	4、registry：registry、registryFactory、registryDirectory、registryProtocol、notifyListener; //注册中心，服务注册、服务监听发现；
	5、cluster：路由层，封装多个提供者的路由及负载均衡，并桥接注册中心，以Invoker为中心，扩展接口为Cluster, Directory, Router, LoadBalance
		        cluster：FailOverCluster、FailOverClusterInvoker;
				Directory：staticDirectory、registryDirectory;目录服务
				directory = new Directory(invoker);//inverker包装成directory
				invoker = cluster.join(directory);//cluster重新将directory包装成invoker
				FailOverClusterInvoker等里面会用到loadbalance；
	6、monitor：monitor、monitorFactory、monitorFilter; //监控中心
	7、protocol：远程调用层，封将RPC调用，以Invocation, Result为中心，扩展接口为Protocol, Invoker, Exporter
		消费端：invoker = protocol.refer(interfaceClass, url);
		服务端：Exporter<?> exporter = protocol.export(invoker);
	8、exchange：信息交换层，封装请求响应模式，同步转异步，以Request, Response为中心，扩展接口为Exchanger, ExchangeChannel, ExchangeClient, ExchangeServer
		exchanger、cxchangeClient、exchangeServer，//message exchange pattern，消息交互模式，为不同种类系统的交互提供支持；
		HeaderExchangeServer/HeaderExchangeClient：封装请求响应模式，同步转异步，以Request和Response为中心；
		invoker中调用exchangeClient.send()来发送信息道channel的远程调用；
		exchanger用来connect远程地址、bind url;
		exchangeServer管理channel等；
	9、transport：网络传输层，抽象mina和netty为统一接口，以Message为中心，扩展接口为Channel, Transporter, Client, Server, Codec
		client、server、transport、codec、channelHandler //运输层，以Netty为核心的消息传输；
		抽象mina和netty为统一接口，以Message为中心
	10、Serialize：数据序列化层，可复用的一些工具，扩展接口为Serialization, ObjectInput, ObjectOutput, ThreadPool
	
5、zookeeper注册中心，代码实现；
	zookeeper模型
		1、服务端启动时，向/dubbo/com.foo.BarService/providers目录下写入自己的URL地址；并订阅该service地址；
		2、消费端启动时，向/dubbo/com.foo.BarService/consumers目录下写入自己的URL地址；
			并订阅/dubbo/com.foo.BarService/providers目录下的提供者URL地址；
		3、监控中心启动时，订阅/dubbo/com.foo.BarService目录下的所有提供者和消费者URL地址。
	
6、监控中心，代码实现；

7、心跳实现：HeartBeatTask，在链路断开后，心跳停止，链路重新连接上后，心跳重新开始，心跳是无限循环的；

8、描述下dubbo RPC协议；request、reponse；

9、序列化代码实现：DubboCodec、DubboSerialization；

10、在dubbo应用开发中遇到过哪些问题？
	retry、spring4.0的支持

12、如何唯一确定一个服务：group、interface、version
	prefix=groupBy/interfaceName:version;
	当一个接口有多种实现时，可以用group区分；
	
13、集群的容错模式
	1、Failover Cluster
		失败自动切换，当出现失败，重试其它服务器。(缺省)
		通常用于读操作，但重试会带来更长延迟。
		可通过retries="2"来设置重试次数(不含第一次)。
	2、Failfast Cluster
		快速失败，只发起一次调用，失败立即报错。
		通常用于非幂等性的写操作，比如新增记录。
	3、Failsafe Cluster
		失败安全，出现异常时，直接忽略。
		通常用于写入审计日志等操作。
	4、Failback Cluster
		失败自动恢复，后台记录失败请求，定时重发。
		通常用于消息通知操作。
	5、Forking Cluster
		并行调用多个服务器，只要一个成功即返回。
		通常用于实时性要求较高的读操作，但需要浪费更多服务资源。
		可通过forks="2"来设置最大并行数。
	6、Broadcast Cluster
		广播调用所有提供者，逐个调用，任意一台报错则报错。(2.1.0开始支持)
		通常用于通知所有提供者更新缓存或日志等本地资源信息。
		
14、负载均衡
	1、Random LoadBalance
		随机，按权重设置随机概率，缺省。
		在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。
	2、RoundRobin LoadBalance
		轮循，按公约后的权重设置轮循比率。
		存在慢的提供者累积请求问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。
	3、LeastActive LoadBalance
		最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。
		使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。
	4、ConsistentHash LoadBalance
		一致性Hash，相同参数的请求总是发到同一提供者。
		当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。
		算法参见：http://en.wikipedia.org/wiki/Consistent_hashing。
		缺省只对第一个参数Hash，如果要修改，请配置<dubbo:parameter key="hash.arguments" value="0,1" />
		缺省用160份虚拟节点，如果要修改，请配置<dubbo:parameter key="hash.nodes" value="320" />
		
15、线程模型
	Dubbo默认的底层网络通讯使用的是Netty，服务提供方NettyServer使用两级线程池，其中 EventLoopGroup(boss) 主要用来接受客户端的链接请求，
	并把接受的请求分发给 EventLoopGroup(worker) 来处理，boss和worker线程组我们称之为IO线程。
	如果服务提供方的逻辑能迅速完成，并且不会发起新的IO请求，那么直接在IO线程上处理会更快，因为这减少了线程池调度。
	但如果处理逻辑很慢，或者需要发起新的IO请求，比如需要查询数据库，则IO线程必须派发请求到新的线程池进行处理，否则IO线程会阻塞，将导致不能接收其它请求。
	
	Dispatcher
		all 所有消息都派发到线程池，包括请求，响应，连接事件，断开事件，心跳等（缺省）。
		direct 所有消息都不派发到线程池，全部在IO线程上直接执行。
		message 只有请求响应消息派发到线程池，其它连接断开事件，心跳等消息，直接在IO线程上执行。
		execution 只请求消息派发到线程池，不含响应，响应和其它连接断开事件，心跳等消息，直接在IO线程上执行。
		connection 在IO线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池。
	ThreadPool
		fixed 固定大小线程池，启动时建立线程，不关闭，一直持有。(缺省)
		cached 缓存线程池，空闲一分钟自动删除，需要时重建。
		limited 可伸缩线程池，但池中的线程数只会增长不会收缩。(为避免收缩时突然来了大流量引起的性能问题)。

16、直连提供者、只订阅、只注册、静态服务、分组聚合、参数验证、结果缓存、泛化引用、泛化实现、参数回调、事件通知、路由规则

17、异步调用
	<dubbo:method name="findBar" async="true" />
	
18、连接控制
	<dubbo:provider protocol="dubbo" accepts="10" />
	<dubbo:protocol name="dubbo" accepts="10" />
	<dubbo:service interface="com.foo.BarService" connections="10" />
	<dubbo:reference interface="com.foo.BarService" connections="10" />

19、服务降级
	mock=force:return+null
	
20、优雅停机
	Dubbo是通过JDK的ShutdownHook来完成优雅停机的，所以如果用户使用"kill -9 PID"等强制关闭指令，是不会执行优雅停机的，只有通过"kill PID"时，才会执行。
	服务提供方
		停止时，先标记为不接收新请求，新请求过来时直接报错，让客户端重试其它机器。
		然后，检测线程池中的线程是否正在运行，如果有，等待所有线程执行完成，除非超时，则强制关闭。
	服务消费方
		停止时，不再发起新的调用请求，所有新的调用在客户端即报错。
		然后，检测有没有请求的响应还没有返回，等待响应返回，除非超时，则强制关闭。
	
21、主机绑定
	dubbo.protocol.host=205.182.23.201
	dubbo.protocol.dubbo.port=20880
	
22、环境搭建
	1、引入dubbo.jar
	2、dubbo.properties，
		消费端、服务端共用配置：
			dubbo.container
			dubbo.application.name
			dubbo.application.owner
			dubbo.registry.protocol
			dubbo.registry.address
			dubbo.monitor.protocol
			dubbo.registry.file
		
		服务端配置
			dubbo.protocol.name
			dubbo.protocol.port
			dubbo.service.loadbalance
			dubbo.log4j.file
			
	3、	dubbo:annotation
		dubbo:consumer
		dubbo:provider
		
		引用：@Reference(version="0.0.1-SNAPSHOT")
		发布：@Service(version="0.0.1-SNAPSHOT")
		
	4、dubbo.xml的优先级高于dubbo.properties
	
dubbo ioc di
spi 
ExtensionLoader.getExtensionLoader(type);
loader.getAdaptiveExtension();
通过set javassit注入，adaptive则通过url参数等动态注入
iop
wrapper实现
ProtocolFilterWrapper
ProtocolListenerWrapper


META-INF/dubbo/internal/
META-INF/dubbo/
META-INF/services/

makeWrapper

AdaptiveExtensionFactory
  SpiExtensionFactory
  SpringExtensionFactory

ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();

	getActivateExtension() ：根据条件获取当前扩展可自动激活的实现，list=extensionLoader.getActivateExtension(url,"filterValue",Constants.CONSUMER);根据url中key对应的value查扩展；
	getExtension(String name) ： 根据名称获取当前扩展的指定实现，最常规的，即在配置文件spi的；
	getAdaptiveExtension() : 获取当前扩展的自适应实现（@Adaptive注解的实现类，每个扩展点最多只能有一个自适应实现，如果所有实现中没有被@Adaptive注释的，
		那么dubbo会动态生成一个自适应实现类，如：Protocol$Adpative，默认返回url中的protocol，否则SPI("dubbo")的值，即dubboProtocol）。
	
	ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension());
	默认的ExtensionFactory实现中，AdaptiveExtensionFactotry被@Adaptive注解注释，也就是它就是ExtensionFactory对应的自适应扩展实现(每个扩展点最多只能有一个自适应实现，
		如果所有实现中没有被@Adaptive注释的，那么dubbo会动态生成一个自适应实现类)，
	
Wapper AOP
com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper
com.alibaba.dubbo.rpc.protocol.ProtocolListenerWrapper，
这两个类不含有@Adaptive注解且具有含有Protocol的单参构造器，符合这样条件的会被列入AOP增强类。放置在loader的私有属性cachedWrapperClasses中。

for (Class<?> wrapperClass : wrapperClasses) {
	instance = injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance));
}

public <T> Invoker<T> getInvoker(T proxy, Class<T> type, URL url) {
    final Wrapper wrapper = Wrapper.getWrapper(proxy.getClass().getName().indexOf('$') < 0 ? proxy.getClass() : type);//这主要统一调用方式
            
    return new AbstractProxyInvoker<T>(proxy, type, url) {
        @Override
        protected Object doInvoke(T proxy, String methodName,Class<?>[] parameterTypes,Object[] arguments) 
		                                                                                   throws Throwable {
            return wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments);
        }
    };
}
	
	
JDK标准的SPI会一次性实例化扩展点所有实现，如果有扩展实现初始化很耗时，但如果没用上也加载，会很浪费资源。
增加了对扩展点IoC和AOP的支持，一个扩展点可以直接setter注入其它扩展点。

扩展点 Dubbo作用灵活的框架，并不会强制所有用户都一定使用Dubbo提供的某些架构。例如注册中心（Registry），Dubbo提供了zk和redis，但是如果我们更倾向于其他的注册中心的话，我们可以替换掉Dubbo提供的注册中心。针对这种可被替换的技术实现点我们称之为扩展点，类似的扩展点有很多，例如Protocol，Filter，Loadbalance等等。

Wrapper Dubbo在加载某个接口的扩展类时候，如果某个实现中有一个拷贝类构造函数，那么该接口实现就是该接口的包装类，此时Dubbo会在真正的实现类上层包装上盖Wrapper。即这个时候从ExtensionLoader中返回的实际扩展类是被Wrapper包装的接口实现类。

Adaptive 这个自适应的扩展点比较难理解，所以这里直接以一个例子来讲解：在RegistryProtocol中有一个属性为Cluster，其中Protocol和Cluster都是Dubbo提供的扩展点，所以这时候当我们真正在操作中使用cluster的时候究竟使用的哪一个cluster的实现类呢？是FailbackCluster还是FailoverCluster？Dubbo在加载一个扩展点的时候如果发现其成员变量也是一个扩展点并且有相关的set方法，就会在这时候将该扩展点设置为一个自适应的扩展点，自适应扩展点（Adaptive）会在真正使用的时候从URL中获取相关参数，来调用真正的扩展点实现类。具体的实现会在下面的源码中详细解释。对于Adaptive的理解其实个人推荐的是Dubbo开发者指南，指南中有对于Adaptive的明确介绍。

Activate 官网的叫法是自激活，其实这个更合适的叫法我认为是条件激活，我们还记得上一篇中有提到Filter的内容，其中Filter链的获取就是通过@Activate注解来确定的，所以Activate的作用主要是：提供一种选择性激活的条件，可以是我们通过相关的配置来确定激活哪些功能。



	
