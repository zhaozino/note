
***********************************************************************

redis

1、单线程

2、简单动态字符串：SDS
	
	SET msg "hello world"
	
	struct sdshdr{
		int len; //长度
		int free; //可用空间
		char buf[]; //内容
	}
	
	SDS最后一个字符为'\0';
	空间预分配：
	当空间不足时，如果修改后，SDS的长度将小于1MB，那么程序分配和len属性同样大小的未使用空间；
	如果长度大于等于1MB，那么程序会分配1MB的未使用空间；
	SDS的API都是二进制安全的，所有SDS API都会以处理二进制的方式来处理SDS存放在buf数组里的数据。
	
3、双端链表：list
	LLEN myList //返回length
	LRANGE myList 0 10 //获取链表前10个元素
	
	typeof struct listNode{
		struct listNode *prev; //前置节点
		struct listNode *next; //后置节点
		void *value; //节点的值
	}
	
	typeof struct list{
		listNode *head; //表头节点
		listNode *tail; //表尾节点
		unsigned long len; //链表所包含的节点数量
		void *(*dup)(void *ptr); //节点值复制函数
		void *(*free)(void *ptr); //节点值释放函数
		int (*match)(void *ptr, void *key); //节点值对比函数
	}list;
	
4、字典：hashMap
	HLEN myMap
	HGETALL myMap
	
	哈希表
	typeof struct dictht{
		dictEntry **table; //哈希表数组
		unsigned long size; //哈希表大小
		unsigned long sizemask; //哈希表大小掩码，用于计算索引值，总是等于size-1
		unsigned long used; //哈希表已有节点的数量
	}dictht;
	
	哈希表节点
	typeof struct dictEntry{
		void *key; //键
		union{ //值
			void *val;
			uint64_t u64;
			int64_t s64;
		}v;
		struct dictEntry *next; //指向哈希表节点，形成链表；
	}dicEntry;

	字典
	typeof struct dict{
		dictType *type; //类型特定函数
		void *privdata; //私有数据
		dictht ht[2]; //哈希表
		int trehashidx; //rehash索引，当rehash不在进行时，值为-1；
	}dict;
	
	type struct dictType{
		函数
		...
	}
	
	解决键冲突：一个键上对应一个链表，可以保存多个值；
	rehash：重新散列哈希表；
	
5、跳跃表：zSkipList，一种有序数据结构；
	ZRANGE fruit-price 0 2 WITHSCORES
	
	跳跃表节点
	typedef struct zskiplistNode{
		//层
		struct zskiplistLevel{
			struct zskiplistNode *forward; //前进指针
			unsigned int span; //跨度
		}level[];
		
		struct zskiplistNode *backward; //后退指针
		double score; //排序分值
		robj *obj; //成员对象
	}zskiplistNode;
	
	跳跃表结构
	typedef struct zskiplist{
		structz skiplistNode *header, *tail; //表头节点、表尾节点
		unsigned long length; //表中节点的数量
		int level; //表中层数最大的节点的层数
	}zskiplist;
	
6、整数集合：intSet
	整数集合(intset)是redis用于保存整数值的集合抽象数据结构，它可以保存的类型为：
		int16_t、int32_t、int64_t的整数值；
	
	SADD numbers 1 2 3 4 5
	
	OBJECT ENCODING numbers
	
	typedef struct intset{
		uint32_t encoding; //编码方式int16_t、int32_t、int64_t
		uint32_t length; //集合包含的元素数量
		int8_t contents[]; //保存元素的数组
	}intset;
	
	升级：从int16_t...升级至int64_t，且不能降级；

7、压缩列表：zipList
	压缩列表是列表键和哈希键的底层实现之一；
	
	RPUSH lst 1 3 5 10086 "hello" "world"
	
	OBJECT ENCODING lst
	
	压缩列表的构成
	
	zlbytes zltail zllen entry1 entry2 ... entryN zlend

8、对象
	编码：int、embstr、raw、双端链表、字典、跳跃表、正数集合、压缩列表；
	对象：字符串对象、列表对象、哈希对象、集合对象、有序集合对象；
	
	Redis中的每个对象都由一个redisObject结构表示，该结构中和保存数据有关的三个属性分别是type、encoding、ptr：
	
	typedef struct redisObject{
		unsigned type:4; //类型
		unsigned encoding:4; //编码；
		void *ptr; //指向底层实现数据结构的指针；
	}
	
	类型常量/对象名称：REDIT_STRING/字符串对象、REDIS_LIST/列表对象、REDIS_HASH/哈希对象、REDIS_SET/集合对象、REDIS_ZSET/有序集合对象；
	
	SET msg "hello world"
	TYPE msg
	返回：string
	
	OBJECT ENCODING
	返回：embstr
	
	编码和底层实现
	编码常量 编码所对应的底层数据结构
	REDIS_ENCODING_INT long类型的整数
	REDIS_ENCODING_EMBSTR 编码的简单动态字符串
	REDIS_ENCODING_RAW 简单动态字符串
	REDIS_ENCODING_LINKEDLIST 双端链表
	REDIS_ENCODING_HT 字典
	REDIS_ENCODING_SKIPLIST 跳跃表
	REDIS_ENCODING_INTSET 整数集合
	REDIS_ENCODING_ZIPLIST 压缩列表
	
	不同类型和编码对象
	类型/TYPE 编码/OBJECT ENCODING 对象
	REDIS_STRING REDIS_ENCODING_INT 整数值实现的字符串对象
	REDIS_STRING REDIS_ENCODING_EMBSTR embstr编码的简单动态字符串实现的字符串对象
	REDIS_STRING REDIS_ENCODING_RAW 简单动态字符串实现的字符串对象
	REDIS_LIST REDIS_ENCODING_ZIPLIST 压缩列表实现的列表对象
	REDIS_LIST REDIS_ENCODING_LINKEDLIST 双端链表实现的列表对象
	REDIS_HASH REDIS_ENCODING_ZIPLIST 压缩列表实现的哈希对象  
	REDIS_HASH REDIS_ENCODING_HT 字典实现的哈希对象  
	REDIS_SET REDIS_ENCODING_INTSET 整数集合实现的集合对象
	REDIS_SET REDIS_ENCODING_HT 字典实现的集合对象
	REDIS_ZSET REDIS_ENCODING_ZIPLIST 压缩列表实现的有序集合对象
	REDIS_ZSET REDIS_ENCODING_SKIPLIST 跳跃表和字典实现的有序集合对象
	
	字符串对象，编码可以是int、embstr、raw;
	int：如果字符串对象保存的是整数值，且可以用long类型来表示，那么编码为int；
	embstr：如果字符串对象保存的是一个字符串值，并且这个字符串值的长度<=39字节，那么编码为embstr；
	raw：如果字符串对象保存的是一个字符串值，并且这个字符串值的长度>39字节，那么用一个SDS保存，且编码为raw；
	embstr：两个连续的内存空间，raw两个分开的内存空间；
	
	字符串的命令实现：
	SET：赋值；
	GET：取值；
	APPEND：后缀字符串；
	INCRBY：int相加；
	DECRBY：int相减；
	
	列表对象
	列表对象的编码可以是ziplist或者linkedlist；
	RPUSH numbers1 "three" 5
	
	同时满足以下两个条件，列表对象使用ziplist编码：其他条件下用linkedlist编码；
	1)列表对象保存的所有字符串元素的长度都小于64字节；
	2)列表对象保存的元素数量小于512个；
	
	列表命令的实现：
	LPUSH：将新元素压入表头；
	RPUSH：将新元素压入表尾；
	LPOP：返回表头节点并删除；
	RPOP：返回表尾节点并删除；
	LSET：覆盖指定索引元素；
	LINDEX：返回指定索引的节点；
	LINSERT：将新节点插入指定索引位置；
	LREM：删除指定节点；
	LRANGE：指定索引范围的数据；
	
	哈希对象
	哈希对象的编码可以是ziplist或者hashtable；
	HSET book name "thinking in java"
	
	同时满足以下两个条件，哈希对象使用ziplist编码：其他条件下用hashtable编码；
	1)哈希对象保存的所有键值对的键和值的字符串长度都小于64字节；
	2)哈希对象保存的键值对数量小于512个；
	
	哈希命令的实现：
	HSET：新增元素；
	HGET：取值；
	HDEL：删除元素；
	HEXISTS：查找指定的键；
		
	集合对象：不能有重复的值；
	集合对象的编码可以是intset或者hashtable；
	
	当集合对象同时满足以下两个条件时，对象使用intset编码，其他条件使用hashtable编码；
	1)集合对象保存的所有元素都是整数值；
	2)集合对象保存的元素数量不超过512个；
	
	结合命令的实现：
	SADD：新增元素；
	SREM：删除给定的元素；
	SMEMBERS：返回所有集合元素；
	SISMEMBER：查找是否存在指定元素；
		
	有序集合对象
	有序集合对象的编码可以是ziplist或者skiplist；
	ZADD price 8.5 apple 5.0 banana 6.0，数字是排序因子，从小到大排；
	
	当有序集合对象可以同时满足以下两个条件时，对象使用ziplist编码，其他条件skiplist编码；
	1)元素数量小于128个；
	2)元素成员长度<64字节；
	
	有序集合的命令实现：
	ZADD：添加元素；
	ZREM：删除指定定的元素；
	ZRANGE：从表头遍历，返回给定索引范围的元素；
	
	可以对任何类型的键执行：DEL、EXPIRE、RENAME、TYPE、OBJECT；
	
9、数据库
	typedef struct redisServer{
		redisDb *DB; //一个数组，保存着服务器中的所有数据库
	}redisServer;
	
	typedef struct redisDb{
		dict *dict; //数据库键空间，保存着数据库中的所有键值对
	}redisDb;
	
	每个键都是一个字符串对象；
	
	切换数据库：默认为0号数据库；
	SELECT 2
	
	添加新键：SET date '2014-03-12'
	删除键：DEL date
	更新键：SET date '2014-03-13'
	取值：GET date
	
	设置键的生存时间或过期时间
	EXPIRE、PEXPIRE：经过多少秒/毫秒后删除键；
	EXPIREAT、PEXPIREAT：设置秒/毫秒时间戳；
	TTL、PTTL：返回键的剩余生存时间；
	e.g. EXPIRE key 1000;
	
	移除过期
	PERSIST：移除一个键的过期时间；
	
	过期键的删除策略
	定时删除：在设置键的过期时间的同时，创建一个定时器，当过期时间到来时，删除键；
	惰性删除：每次取键时，看该键有没有过期，如果过期则删除；如果没有过期，则返回；
	定期删除：每隔一段时间，程序就对数据库进行一次检查，删除里面的过期键；
	
	AOF、RDB、复制功能对过期键的处理
	生成RDB文件
	在执行SAVE或者BGSAVE命令创建一个新的RDB文件时，程序会对数据库中的键进行检查，已过期的键不会被保存到新创建的RDB文件中；
	
	载入RDB文件
	在启动Redis服务器时，如果服务器开启了RDB功能，那么服务器将对RDB文件进行载入：
	如果服务器以主服务器模式运行，那么在载入RDB文件时，程序会对文件中保存的键进行检查，未过期的键会被载入到数据库中，
	而过期键会被忽略；
	如果服务器以从服务器模式运行，那么在载入RDB文件时，文件中保存的所有键，不论是否过期，都会被载入到数据库中；
	因为主从服务器在进行数据同步时，从服务器的数据库就会被清空，所以一般来讲，过期键对载入RDB文件的从服务器
	也不会造成影响；
	
	AOF文件写入
	当服务器以AOF持久化模式运行时，如果数据库中的某个键已经过期，但他还没有被惰性删除或者定期删除，
	那么AOF文件不会因为这个过期键而产生任何影响；
	当过期键被惰性删除或定期删除后，程序会向AOF文件追加一条DEL命令，来显式地记录该键已被删除。
	
	AOF重写
	在执行AOF重写的过程中，程序会对数据库中的键进行检查，已过期的键不会被保存到重写后的AOF文件中；
	
	复制
	当服务器运行在复制模式下时，从服务器的过期键删除动作由主服务器控制：
	主服务器在删除一个过期键之后，会显式地向所有从服务器发送一个DEL命令，告知从服务器删除这个过期键；
	从服务器在执行客户端发送的命令时，即使碰到过期键也不会将过期键删除，而是继续像处理未过期的键一样来处理过期键；
	从服务器只有在接到主服务器发来的DEL命令后，才会删除过期键；
	如果客户端向从服务器发送命令GET message，那么从服务器将发现message键已经过期，但从服务器并不会删除
	message键，而是继续将message键的值返回给客户端，好像message键并没有过期一样。
	如果客户端向主服务器发送命令GET message，那么主服务器发贤键message已经过期，主服务器会删除message键，
	向客户端返回空回复，并向从服务器发送DEL message命令；
	
10、RDB持久化
	
	将某个时间点上的数据库状态保存到一个RDB文件中；RDB文件是一个经过压缩的二进制文件；
	
	SAVE、BGSAVE：生成RDB文件；
	
	SAVE命令会阻塞Redis服务器进程，直到RDB文件创建完毕；在服务器进程阻塞期间，服务器不能处理任何命令请求；
	
	BGSAVE命令会派生出一个子进程，然后由子进程负责创建RDB文件，服务器进程（父进程）继续处理命令请求；
	
	服务器在载入RDB文件期间，会一直处于阻塞状态，直到载入工作完成为止；
	
	因为AOF文件的更新频率通常比RDB文件的更新频率高，所以：
	如果服务器开启了AOF持久化功能，那么服务器会优先使用AOF文件来还原数据库状态；
	只有在AOF持久化功能处于关闭状态时，服务器才会使用RDB文件来还原数据库状态；
	
	自动间隔性保存
	通过配置save选项，让服务器每隔一段时间自动执行一次BGSAVE命令；
	save 900 1 //900秒内，对数据库至少执行了一次修改
	save 300 10
	save 60 10000
	满足其中任意一个条件即可；
	
	RDB文件结构
	REDIS db_version databases EOF(表示内容结束) check_sum(校验和)
	
11、AOF持久化
	
	通过保存Redis服务器执行的写命令来记录数据库状态；
	
	AOF持久化功能的实现分为命令追加、文件写入、文件同步三个步骤；
		命令追加：服务器在执行完一个写命令后，会以协议格式将被执行的写命令追加到服务器状态的aof_buf缓冲区的末尾；
		AOF文件的写入与同步：将缓冲区的命令执行写入Redis，并同步到AOF文件中；
	
	AOF文件的载入与数据还原
		1)、创建一个不带网络连接的伪客户端；
		2)、从AOF文件中分析出并读取出一条写命令，并执行；
		
	AOF重写：解决AOF文件膨胀的问题
		AOF重写：新建一个AOF文件，把数据库的当前状态同步到新的AOF文件中；
		AOF重写缓冲区；在重写时产生的新的写命令会同时保存到AOF重写缓冲区，执行完重写后，把重写缓冲区的命令写入AOF；
	
12、事件
	文件事件：Redis服务器通过套接字与客户端进行连接，而文件事件就是服务器对套接字操作的抽象。
	服务器与客户端的通信会产生相应的文件事件，而服务器则通过监听并处理这些事件来完成一系列网络通信操作；
	时间事件：Redis服务器中的一些操作需要在给定的时间点执行，而时间事件就是服务器对这类定时操作的抽象；
	Redis通信：I/O多路复用；
	
13、客户端
	CLIENT list：目前所有连接到服务器的客户端；
	默认情况下，一个连接到服务器的客户端是没有名字的；
	CLIENT setname命令可以给客户端设置一个名字；
	
14、服务器

15、复制
	通过SLAVEOF命令或设置slaveof选项，让一个服务器去复制另一个服务器，被复制的服务器为主服务器，复制的服务器为从服务器；
	127.0.0.1:12345> SLAVEOF 127.0.0.1 6379
	6379是主服务器；12345是从服务器；
	
	复制功能的实现
	旧：
		同步：从服务器向主服务器发送SYNC命令，主服务器生成一个全量的RDB文件，发送给从服务器；
		命令传播：主服务器执行了写命令，会立即发送给从服务器；
	
	新：
		同步：PSYNC代替SYNC，分完整同步和部分同步；
			完整同步类似SYNC；
			部分同步：通过复制偏移量实现将增量的命令发送给从服务器；

16、Sentinel
	Redis高可用的解决方案；由一个或多个Sentinel实例组成的Sentinel系统可以监视任意多个主服务器，
		以及这些主服务器属下的所有从服务器，并在被监视的主服务器进入下线状态时，自动将下线主服务器
		属下的某个从服务器升级为新的主服务器，然后由新的主服务器代替已下线的主服务器继续处理命令请求；
	
	Sentinel本质上只是一个运行在特殊模式下的Redis服务器；
	启动并初始化Sentinel：redis-sentinel /path/sentinel.conf //sentinel会监听sentinel.conf中配置的服务器
	
	两个面向服务器的连接
		1、命令连接：发送INFO命令等，获取服务器的当前信息；
		2、订阅连接；
	
	选举领头Sentinel
		当一个主服务器被判断为客观下线时，监视这个下线主服务器的各个Sentinel会进行协商，选举一个领头的Sentinel，
			并由领头Sentinel对下线主服务器执行故障转移操作；
		如果某个Sentinel被半数以上的Sentinel设置成了局部领头Sentinel，那么它就会成为领头Sentinel；
			如果没有，会重新进行选举；
		领头Sentinel会根据服务器的优先级选出主服务器；
	
17、集群
	Redis集群是Redis提供的分布式数据库方案，集群通过分片来进行数据共享，并提供复制和故障转移功能；
		
	Redis集群的整个数据库被分为16384个槽，数据库中的每个键都属于这16348个槽中的一个；CRC16(key)&16348;
	
	一个节点除了会记录自己负责处理哪些槽，还会把这些信息通过消息发送给集群中的其他节点；因此，集群中
		每个节点都会知道数据库中16384个槽分别被指派给了哪些节点；
		
	当客户端发送与数据库键有关的命令时，接收命令的节点会计算出对应的槽，如果槽在自己的节点上，直接执行命令，
		否则，返回MOVED错误，指引客户端指向正确的节点；MOVED错误是被隐藏处理的；
		
	重新分片：移动槽到另外的节点；
		如果客户端发送的命令涉及到正在重新分片的数据，如果数据还在原节点，则直接执行，否则，返回ASK错误，
			指引客户端到目标节点，客户端会向目标节点发送ASKING命令，然后重新执行涉及键的命令；ASK错误也是隐藏的；
	
	集群中的每个节点都会定期地向集群中的其他节点发送PING消息，以此来检测对方是否在线；
		如果集群中，一半以上的主节点都将某个主节点X报告为疑似下线，那么X会被标记为下线，且被广播出去；
		所有主节点参与投票，在从节点中选举出新的主节点；
	
	Redis服务器在启动时会根据cluster-enabled配置选项是否为yes来决定是否开启服务器的集群模式；
	
	CLUSTER MEET ip port //将ip加人当前节点所在的集群；
	
	CLUSTER NODES //当前节点所在集群包含哪些节点；
	
	CLUSTER REPLICATE ip //把当前节点设为ip的从节点；
	
18、发布与订阅	
	Redis的发布与订阅功能由PULISH、SUBSCRIBE、PSUBSCRIBE等命令组成；
	
	SUBSCRIBE：客户端可以订阅一个或多个频道，每当有其他客户端向被订阅的频道发送消息时，频道的所有订阅者都会收到这条消息；
	SUBSCRIBE "channelName"; //订阅channelName频道；
	PUBLISH "channelName" "hello world!"; //推送消息；
	
	PSUBSCRIBE：订阅含正则表达式的频道；
	
	UNSUBSCRIBE：退订频道；
	PUNSUBSCRIBE：退订频道；
	
	PUBSUB CHANNELS [pattern]：服务器当前被订阅的频道；
	
19、事务
	Redis通过MULTI、EXEC、WATCH等命令来实现事务功能；
	事务提供了一种将多个命令请求打包，然后一次性、按顺序地执行多个命令的机制；
	并且在事务执行期间，服务器不会中断事务而改去执行其他客户端的命令请求，
	它会将事务中的所有命令都执行完毕，然后才去处理其他客户端的命令请求；
	MULTI
	SET "name" "value"
	SET "name2" "value2"
	EXEC
	1、事务开始；2、命令入队；3、事务执行；
	WATCH命令是一个乐观锁，它可以在EXEC命令执行之前，监视任意数量的数据库键，并在执行EXEC命令执行时，
	检查被监视的键是否至少有一个已经被修改过了，如果是的话，服务器将拒绝执行事务，并向客户端返回
	代表事务执行失败的空回复。
	WATCH "name"
	MULTI
	SET "name" "value"
	EXEC
	事务的ACID性质
	Redis不提供回滚功能，执行错误了不影响已经执行的命令和接下来要执行的命令；
	
21、排序：默认升序
	Redis的SORT命令可以对列表键、集合键或者有序集合键的值进行排序。
	SORT numbers，会对一个包含数字值的键key进行排序；
	SORT strs ALPHA
	通过ALPHA，SORT命令可以对包含字符串值的键进行排序；
	SORT numbers ASC/DESC
	BY
	SADD fruits "apple" "banana" "cherry"
	MSET apple-price 8 banana-price 5.5 cherry-price 7
	SORT fruits BY *-price [ALPHA]
	LIMIT
	SORT命令默认返回所有的值，LIMIT可以限制
	SORT fruits ALPHA LIMIT 0 4 //返回4个值；
	GET选项
	STORE：保存排序结果
	SORT students ALPHA STORE sorted_students
	
java client jedis
	
	connected_clients : 已连接客户端的数量
	client_longest_output_list : 当前连接的客户端当中，最长的输出列表
	client_longest_input_buf: 当前连接的客户端当中，最大输入缓存
	blocked_clients: 正在等待阻塞命令（BLPOP、BRPOP、BRPOPLPUSH）的客户端的数量
	used_memory_human: 以人可读的格式返回 Redis 分配的内存总量
	used_memory_rss: 从操作系统的角度，返回 Redis 已分配的内存总量（俗称常驻集大小）。这个值和 top 、 ps 等命令的输出一致。
	replication: 主/从复制信息
	instantaneous_ops_per_sec: 服务器每秒钟执行的命令数量。
	
	开发：Redis 为啥不能访问了？
	运维：刚刚服务器内存坏了，服务器自动重启了
	开发：为什么 Redis 延迟这么大？
	运维：不要在 Zset 里放几万条数据，插入排序会死人啊
	开发：写进去的 key 为什么不见了？
	运维：Redis 超过最大大小了啊，不常用 key 都丢了啊
	开发：刚刚为啥读取全失败了
	运维：网络临时中断了一下，从机全同步了，在全同步完成之前，从机的读取全部失败
	开发：我需要 800G 的 Redis，什么时候能准备好？
	运维：线上的服务器最大就 256G，不支持这么大
	开发：Redis 慢得像驴，服务器有问题了？
	运维：千万级的 KEY，用 keys*，慢是一定了。
	
***********************************************************************************************************

redis分布式锁：setnx(set if not exists)
	setnx lock:codehole true
	... do something critical ...
	del lock.codehole
	
	问题1：如果do something critical异常，导致没有释放锁del；
	方案：加过期时间：expire lock:codehole；
	
	问题2：如果setnx和expire之间服务器进程突然挂掉，可能是因为机器掉电或者认为造成，就会导致expire得不到执行，也会造成死锁；
		根本原因setnx和expire两条指令不是原子执行，也许会想到用redis事务，但redis事务不是真正的事务：setnx失败后，expire还会执行；
	方案：redis2.8，加入了set指令的扩展参数，使setnx和expire指令可以一起执行，set lock:codehole true ex 5 nx；
	
	问题3：在释放锁del时，如果锁因为超时，早前已被自动释放掉了，此时再执行del可能会释放掉别人的锁；
	方案：加锁时设置一个随机数，释放锁del时，先判断随机数是否自己设的：
		setnx lock:codehole randomNumber；
		... do something ...
		if(randomNumber == targetVal){
			del lock.codehole
		}
	
	问题4：if(randomNumber == targetVal)和del不是一个原子操作，可以适用lua脚本处理，因为lua脚本可以保证连续多个指令的原子性执行；
	
可重入锁：如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的；
	
位图
	获取字符串的ASCII码，存到位图，取出字符串；
	setbit s 0 1：设位图的索引0为1；
	getbig s 0；查询索引0的值；
	bitcount：指定范围内1的个数；bitount s；返回20，一共有20个1；
	bitpos：指定范围内出现第一个0或1；bitpos s 0；
	bigfield：一次操作多个位；getbit、setbit都是操作单个位的；
	
HyperLog：

Approximate Histogram（近似直方图）：

布隆过滤器

限流：
	1、滑动窗口：每进来一次请求
		1、zadd(key, now_ts, now_ts);
		2、zremrangebyscore(key, 0, now_ts - period*1000);删除score为0~now_ts - period*1000之间的数据；
		3、zcard(key)计算当前zset中数量；
		4、expre(key, period+1)；防止冷数据，设置超时，多加一秒窗口；
	2、漏斗限流，Redis-Cell；Kafka；
	3、令牌桶；
	
GeoHash：地理位置Geo；

scan、keys：如何从海量的key中找出满足特定前缀的key列表？
keys：列出所有满足特定正则字符串规则的key；缺点：
	1、没有offset、limit，可能返回的数量特别大；
	2、使用遍历算法，复杂度O(n)，如果实例中有千万级的key，这个指令就会导致Redis服务卡顿，所有读写redis的其他指令都会被延后甚至超时报错，
		因为redis是单线程程序，顺序执行所有指令，其他指令必须等到当前的keys指令执行完才可以继续；
scan：scan 0 match key99* count 1000；
	1、复杂度依然是O(n)，但它是通过游标分步进行的，不会阻塞线程；
	2、提供limit参数，可以控制每次返回结果的最大条数，limit只是一个hint，返回的结果可多可少；
	3、支持正则匹配；
	4、服务器不需要为游标保存状态，游标的唯一状态就是scan返回给客户端的游标整数；
	5、返回的结果可能有重复，需要客户端去重；
	6、遍历过程中，如果有数据修改，改动后的数据能不能遍历到是不确定的；
	7、单次返回结果为空，并不意味着遍历结束，而要看返回的游标值是否为0.

避免使用大的key对象，集群数据迁移，有可能造成卡顿，要分配一块很大的内存块；

redis单线程，多路复用（事件轮询）

快照持久化
	redis在快照持久化时会调用glibc的函数fork产生一个子进程，快照持久化完全交给子进程来处理，父进程继续处理客户端的请求；
	在快照持久化时，可能数据同时有修改，redis会使用操作系统的多进程COW(Copy On Write)机制来实现快照持久化：当父进程对其中一个页面的数据进行
	修改时，会将被共享的页面复制一份分离出去，然后对这个复制的页面进行修改；
	
AOF持久化
	主节点先执行指令，再将指令存盘，再同步到子节点回放，区别于leveldb、hbase先存盘，再执行；
	AOF日志过大，会导致redis重启加载速度特别慢，所以要重写；
	AOF是先写到缓存，再异步刷新到磁盘，通常每秒fsync一次，因为fsync很慢；另外两种策略：每个指令执行一次，或者永不调用fsync，让操作系统异步刷新；
	
混合持久化
	rdb文件内容和增量AOF日志文件存在一起；

管道pipeline，管道是客户端提供的，网络原理：Redis 管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。
	1、网络写入是写入操作系统的缓存，再由操作系统异步发送到远程网络，如果系统缓存已满（很少），网络写入会阻塞，所以网络写入一般速度很快；
	2、网络读取，是读取操作系统缓存，如果系统缓存有内容，读取直接返回，如果系统缓存为空，则网络读取会阻塞，所以，网络读取一般很忙，因为要进行网络传输和逻辑处理；
	3、管道是连续网络写入多个命令再读取等待，而不是写一个命令读一命令，因为读很耗时；
	
redis事务：只满足事务隔离性，无法回滚，中间一个指令出错，也会把后续的指令执行完，只是这些指令中间不会有其他客户端指令执行；
	
