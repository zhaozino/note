
***********************************************************************

计算机网络、HTTP权威指南、鸟哥的linux私房菜、分布式操作系统

物理层的中间设备叫转发器；
数据链路层的中间设备叫网桥或桥接器；
网络层的中间设备叫路由器；
网络层以上的中间设备叫网关；历史原因，有些时候把路由器也称为网关；
一般情况下，交换机工作在数据链路层，但现在有一些新的交换机可以工作在网络层；


计算机网络
物理层：比特；
数据链路层：帧；
网络层：IP数据报；
运输层：报文段；

物理层
	集线器的英文称为“Hub”。“Hub”是“中心”的意思，集线器的主要功能是对接收到的信号进行再生整形放大，以扩大网络的传输距离，同时把所有节点集中在以它为中心的节点上。
	它工作于OSI(开放系统互联参考模型)参考模型第一层，即“物理层”。集线器与网卡、网线等传输介质一样，属于局域网中的基础设备，采用CSMA/CD（即带冲突检测的载波监听多路访问技术)
	介质访问控制机制。集线器每个接口简单的收发比特，收到1就转发1，收到0就转发0，不进行碰撞检测。
	
	集线器（hub）属于纯硬件网络底层设备，基本上不具有类似于交换机的"智能记忆"能力和"学习"能力。它也不具备交换机所具有的MAC地址表，
	所以它发送数据时都是没有针对性的，而是采用广播方式发送。也就是说当它要向某节点发送数据时，不是直接把数据发送到目的节点，
	而是把数据包发送到与集线器相连的所有节点
	
数据链路层的三个问题：封装成帧、透明传输、差错检测；Mac帧；
	封装成帧：添加帧首部、尾部；
	透明传输：帧开始(SOH)、结束标记(EOT)，特殊的控制字符；
	差错检测：循环冗余校验CRC；模2运算，冗余码加到帧的后面；
		数据链路层是无差错传输，并不是可靠传输，因为它没有解决帧丢失、重复、失序问题；
	MTU：链路层最大传输单元；
	mac地址在数据帧中；
	网络适配器：网卡，计算机的硬件地址在适配器的ROM中，而软件地址IP，则在计算机的存储器中；
	集线器、网桥、交换机；网桥一次只能分析、转发一个帧，而交换机是并行的；
	以太网局域网；
	点对点信道、广播信道，以及这两种信道所使用的协议（PPP协议以及GSMA/CD协议）；
	
	PPP点对点协议，针对两个端点的信息传输，因特网用户通常都要连接到某个ISP才能接入到因特网，PPP协议就是用户计算机和ISP进行通信时所使用的数据链路层协议；
	以太网采用的协议是GSMA/CD协议；
	CSMA/CD（CarrierSenseMultipleAccesswithCollisionDetection）即带冲突检测的载波监听多路访问技术(载波监听多点接入/碰撞检测)。在传统的共享以太网中，所有的节点共享传输介质。如何保证传输介质有序、高效地为许多节点提供传输服务，就是以太网的介质访问控制协议要解决的问题。总线以太网使用CSMA/CD协议，以半双工方式工作。但以太网交换机不使用共享总线，没有碰撞问题，因此不使用CSMA/CD协议，而是以全双工方式工作。既然连以太网的重要协议CSMA/CD都不使用了，为什么还叫做以太网呢？原因就是它的帧结构未改变，仍然采用以太网的帧结构；
	从整个互联网来看，局域网仍他属于数据链路层的范围；
	
	局域网使用的是广播信道。
	
	广播信道：星形网；
		CSMA/CD，载波监听多点接入/碰撞检测协议；
			1、载波监听：发送前先检测下总线上是否有其他站在发送数据；
			2、碰撞检测：边发送数据，边检测是否有其他站在发送数据，如果有，立即停止发送；
				推迟一个随机的时间（退避算法），再重新发送；
	
	网桥：工作在数据链路层的MAC子层，它根据MAC帧的目的地址对收到的帧进行转发和过滤。当网桥收到一个帧时，并不是向所有的接口转发此帧，
		而是先检查此帧的目的MAC地址，然后再确定将该帧转发到哪一个接口，或者是把它丢弃；每个接口对应一个网段；
		连接两个或多个以太网，根据MAC转发表，存储转发到不同接口，即到不同的以太网，再到不同的MAC地址；
		存储转发；网桥互联的网段仍然是一个局域网，只能有一个网络号。
		
		多接口网桥——以太网交换机
			实质是多接口的网桥，每个接口都直接与一个单个主机或另一个交换机相连（或另一个集线器相连）（网桥每个接口都连到以太网的一个网段；集线器：以太网中通过集线器来连接多台主机）
			当主机需要通信时，交换机能同时联通许多对的接口，使每一对互相通信的主机都能像独占通信媒体那样，无碰撞地传输数据。
			对于普通10Mb/s的共享式以太网，若共有N个用户，则每个用户占有的平均带宽只有总带宽(10Mb/s)的N分之一。在使用以太网交换机
			时，虽然在每个接口到主机的带宽还是10Mb/s，但由于一个用户在通信时是独占而不是和其他网络用户共享传输媒体的宽带，因此
			对于拥有N对接口的交换机的总容量为N*10Mb/s，这正是交换机的最大优点；
			
			利用以太网交换机可以很方便地实现虚拟局域网VLAN；
			
			以太网的帧格式里包含虚拟局域网的标识字段；
			用户发起一次IP请求，系统首先判断目的IP和本机是否同一网段，如果不是同一网段，直接发往默认网关，如果是同一网段，发送到交换机，交换机从路由表中取出mac地址，发送到交换机对应的接口，再到目的IP对应的计算机；
			
网路层：IP数据报分组转发；
	网路协议IP、地址解析协议ARP(根据IP地址找到物理MAC地址)、逆地址解析协议RARP(根据物理Mac地址找到IP地址)、网际控制报文协议ICMP(PING)、网际组管理协议IGMP；
	IP地址=网络号+主机号；
	A、B、C、D、E类IP地址；
	A：0开头，8位网络号，24位主机号；0
	B：10开头，16位网络号，16位主机号；128
	C：110开头，24位网络号，8位主机号；192
	D：1110开头，多播地址；224
	E：1111开头，保留今后使用；240
        255

	内部地址：
	1、10.0.0.0 ~ 10.255.255.255（或记为10.0.0.0/8）一个A类网络
	2、172.16.0.0 ~ 172.31.255.255（或记为172.16.0.0/8）16个连续的B类网络
	3、192.168.0.0 ~ 192.168.255.255（或记为192.168.0.0/16）256个C类网络
	
	路由器总是有两个或两个以上的IP地址；
	子网掩码：从主机号中取若干位用作子网号；
	
	NAT
	1、根据IP对应关系，NAT路由器有N个公网IP地址，则同时可以有N台内部机器上网；
	2、根据运输层端口对应关系，一个端口对应一台内网机器，复用NAT公网IP；即NAPT
	
	
运输层：TCP/UDP
	UDP：无连接、尽最大努力交付、面向报文；没有拥塞控制；支持一对一，一对多，多对一，多对多；
		收到UDP报文后，不需要给出任何确认。
	TCP：面向连接的、可靠交付、全双工；不提供广播或多播服务；只能是一对一；
		停止等待协议
			A发送报文，等待B确认后，再发送下一个报文；
			A超过一段时间仍没收到确认，就认为刚才发送的分组丢失了，重传前面发送过的分组，即超时重传；
			B收到错误的报文直接丢掉，不通知A，A有超时重传机制；
			B收到重复的报文，直接丢掉，并再次发送确认给A；
		连续ARQ协议，即滑动窗口协议，滑动窗口以字节为单位
			位于窗口内的分组可以连续发送出去，而不需要等待对方确认；
			发送方收到一个确认，就把窗口向前移动一个分组的位置；接收方对按序到达的最后一个分组发送确认，这就表示，到这个分组为止的所有分组都已正确收到了。
		序号：占4字节，0 ~ 2的32次方-1；增加到底，重新归0；TCP是面向字节流的，在一个TCP连接中传送的字节流中的每一个字节都按顺序编号。整个要传送的字节流的
			起始序号必须在连接建立时设置。首部中的序号字段值则指的是本报文段所发送的数据的第一个字节的序号。例如，一报文段的序号字段值是301，而携带的数据
			共有100字节。这就表明：本报文段的数据的第一个字节的序号是301，最后一个字节的序号是400.显然，下一个报文段的数据序号应当从401开始，即下一个报文段
			的序号字段值应为401.这个字段的名称也叫做报文段序号。
		确认号：占4字节，是期望收到对方下一个报文段的第一个数据字节的序号。同上序号算法；
		
		流量控制：滑动窗口、拥塞窗口、接收方receiver window、MSS/时间/接收方发送信号、累积发送解决小分组问题；
			就是让发送方的发送速率不要太快，要让接收方来得及接收。利用滑动窗口机制可以很方便地在TCP连接上实现对发送方的流量控制。
			接收方会向发送方发送确认报文，其中包含rwnd=100，即receiver window的大小，即接收方缓存还能接收收多少字节；
			
			TCP传输速率：发送方控制机制，第一种，MSS最大报文段长度，只有缓存中存放的数据达到MSS字节时，就组装成一个TCP报文段发送出去。
			第二种，由发送方的应用进程指明要求发送报文段，即TCP支持的推送操作。第三种机制是发送方的一个计时期限到了，这时就把当前已有的缓存数据装入报文段发送出去。
			
			Nagle算法：是为了减少广域网的小分组数目，从而减小网络拥塞的出现；该算法要求一个tcp连接上最多只能有一个未被确认的未完成的小分组，在该分组ack到达之前不能
				发送其他的小分组，tcp需要收集这些少量的分组，并在ack到来时以一个分组的方式发送出去；其中小分组的定义是小于MSS的任何分组；
				该算法的优越之处在于它是自适应的，确认到达的越快，数据也就发哦送的越快；而在希望减少微小分组数目的低速广域网上，则会发送更少的分组；
				如果我们的应用程序一次产生1个字节的数据，而这个1个字节数据又以网络数据包的形式发送到远端服务器，那么就很容易导致网络由于太多的数据包而过载。比如，
				当用户使用Telnet连接到远程服务器时，每一次击键操作就会产生1个字节数据，进而发送出去一个数据包，所以，在典型情况下，传送一个只拥有1个字节有效数据的数据包，
				却要发费40个字节长包头（即ip头20字节+tcp头20字节）的额外开销，这种有效载荷（payload）利用率极其低下的情况被统称之为愚蠢窗口症候群（Silly Window Syndrome）。
				可以看到，这种情况对于轻负载的网络来说，可能还可以接受，但是对于重负载的网络而言，就极有可能承载不了而轻易的发生拥塞瘫痪。
				针对上面提到的这个状况，Nagle算法的改进在于：如果发送端欲多次发送包含少量字符的数据包（一般情况下，后面统一称长度小于MSS的数据包为小包，与此相对，
				称长度等于MSS的数据包为大包，为了某些对比说明，还有中包，即长度比小包长，但又不足一个MSS的包），则发送端会先将第一个小包发送出去，而将后面到达的少量字符
				数据都缓存起来而不立即发送，直到收到接收端对前一个数据包报文段的ACK确认、或当前字符属于紧急数据，或者积攒到了一定数量的数据（比如缓存的字符数据已经达到数据包
				报文段的最大长度）等多种情况才将其组成一个较大的数据包发送出去，具体有哪些情况，我们来看看内核实现：
				
			糊涂窗口综合征：对于接收端来讲，如果接收很慢，一次接收1个字节或者几个字节，这个时候接收端 缓冲区很快就会被填满，然后窗口通告为0字节，这个时候发送端停止发送，
				应用程序收上去1个字节后，发出窗口通告为1字节，发送方收到通告之后，发出1个字节的数据，这样周而复始，传输效率会非常低。
				同时如果发送端程序一次发送一个字节，虽然窗口足够大，但是发送仍是一个字节一个字节的传输，效率很低。
				解决方法：对于后面的数据，协议栈会进行累计并等待，或者收到一个接收端发出一个ACK，或者累计到一个最大报文段，然后再发送数据除了Nagle算法发送端还可以通过1个字节的数据来探测Windowsize的变化。
				
		拥塞控制：慢开始、快重传（重复确认）、快恢复、拥塞避免；
			1、慢开始：
			算法思路：当主机开始发送数据时，由于并不清楚网络的负荷情况，所以如果立即把大量数据字节注入到网络，那么就有可能引起网络发生拥塞。经验证明，最好的方法是先探测一下，
			即由小到大逐渐增大发送窗口，也就是说，由小到大逐渐增大拥塞窗口数值。拥塞窗口：发送端的一个窗口，类似滑动窗口，用来控制拥塞；路由器、网关等中间设备也有拥塞窗口；
			
			2、拥塞避免：RTT（一次传输的往返时间）
			算法思路就是让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是像慢开始阶段那样加倍增长。因此在拥塞避免阶段就有加法增大（AI）的特点。
			这表明在拥塞避免阶段，拥塞窗口cwnd按线性规律增长，比慢开始算法的拥塞窗口增长速率缓慢得多。
			
			3、快重传：
			有时，个别报文段会在网络中丢失，但实际上网络并未发生拥塞。如果发送方迟迟未收到确认，就会产生超时，就会误认为网络发生了拥塞。这就导致发送方错误地启动慢开始，把拥塞窗口
			cwnd又设置为1，因而降低了传输速率。采用快重传算法可以让发送方尽早知道发生了个别报文段的丢失。快重传算法首先要求接收方不要等待自己发送数据时才进行捎带确认，而是要立即
			发送确认，即使收到了失序的报文段，也要立即发出对已收到的报文的重复确认。接收方收到了M1和M2后分别发出了确认，现假定接收方没有收到M3，但却收到了M4。本来接收方可以什么都
			不做，但按照快重传算法，接收方必须立即发送对M2的重复确认，以便让发送方及早知道接收方没有收到报文段M3。发送方接着发送M5和M6。接收方收到后仍要再次分别发出对M2的重复确认。
			这样，发送方共收到了接收方的4个对M2的确认，其中后3个都是重复确认。快重传算法规定，发送方只要一连收到3个重复确认，就知道接收方确实没有收到报文段M3，因而应当立即进行重传，
			即快重传，这样就不会出现超时，发送方也就不会误认为出现了网络拥塞。使用快重传可以使整个网络的吞吐量提高约20%；
			
			4、快恢复：
			在慢启动或拥塞避免重，当出现超时重传时，TCP就会把慢启动门限 ssthresh 的值设置为 cwnd 值的一半，同时 cwnd 设置成1；
			而快恢复则是，一旦出现超时重传，或者收到第三个重复的 ack 时（快重传），TCP 会把慢启动门限 ssthresh 的值设置为 cwnd 值的一半，同时 cwnd = ssthresh；
			
			5、主动队列管理：
			RED，即随机早期检测算法，路由器暂存分发中，有暂存队列，维持两个参数，队列长度最小门限和最大门限，当分组到达时，如果队列当前长度小于最小门限，直接暂存，
			如果大于最大门限，直接丢弃，如果在二者之间，则以指定概率P丢弃；但RED算法现实中效果有限，已不推荐，暂未推出有效算法；
			
			
			
应用层：HTTP/FTP/SMTP	
	
三次握手：
	1、建立连接时，客户端发送syn包(SYN=1, seq=x)到服务器，并进入SYN_SENT（同步已发送）状态，等待服务器确认；
	2、服务器收到syn包，必须确认客户的SYN（SYN=1, ACK=1, ack=x+1），同时自己也发送一个SYN包（syn=y），即SYN+ACK包，此时服务器进入SYN_RCVD（同步收到）状态；
	3、客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ACK=1, seq=x+1, ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED(已建立连接)状态，完成三次握手。
	完成三次握手，客户端与服务器开始传送数据，也就是ESTABLISHED状态。
	
四次握手
	1、客户端发送FIN（FYN=1, seq=u），用来关闭客户端到服务器的数据传输；FIN-WAIT-1终止等待1；
	2、服务端收到FIN，返回ACK（ACK=1, seq=v, ack=u+1），确认号为收到的序号+1；CLOSE_WAIT关闭等待；
	2-1、客户端进入FIN-WAIT-2终止等待2状态；
	3、服务器关闭与客户端的连接，发送FIN（FIN=1, ACK=1, seq=w, ack=u+1）给客户端；LAST-ACK最后确认状态；seq之所以是w，是2~3之间可能还有数据传输；
	4、客户端返回ACK（ACK=1, seq=u+1, ack=w+1）报文确认，并将确认序号设置为收到序号加1。TIME-WAIT时间等待状态；等待2MSL后最后进入CLOSED状态；

SYN=1 seq=x
SYN=1 ACK=1 ack=x+1 seq=y
      ACK=1 ack=y+1 seq=x+1

FIN=1 seq=u
      ACK=1 ack=u+1 seq=v
FIN=1 ACK=1 ack=u+1 seq=w
      ACK=1 ack=w+1 seq=u+1

TCP性能参数
	net.ipv4.tcp_max_syn_backlog = 8192
		SYN队列的长度，默认为1024，加大队列长度为8192，可以容纳更多等待连接的网络连接数
	tcp_rmem：接收缓冲区大小，131072
	tcp_wmem：发送缓冲区，8760
	rmem_max：最大的TCP数据接收窗口（字节），513920
	wmem_max：最大的TCP数据发送窗口（字节），513920
	
HTTP权威指南
	http报文格式：起始行、首部、主体；
		
		起始行：GET /text/hi-there.txt HTTP/1.1
		首部：Content-type:text/plain
		      Content-length:19
		主体：Hi!I am a message!
		
		请求报文：
			<method> <request-URL> <version>
			<headers>
			<entity-body>
			
		响应报文：
			<version> <status> <reason-phrase>
			<headers>
			<entity-body>
	
	Expires/Cache-Control、Last-Modified
	
	1×× 　　保留
	2×× 　　表示请求成功地接收
	3×× 　　为完成请求客户需进一步细化请求
	4×× 　　客户错误
	5×× 　　服务器错误
	
	HTTP CODE
		200
		204：head请求，查看资源类型；
		206：请求一个未完成的下载时，range信息；
		
		301：重定向，永久的；
		302：重定向，暂时的；
		304：静态文件，没有改变；
		
		400：Bad Request，语法错误；
		401：未授权；
		403：Forbidden，服务器接受请求，但是被拒绝处理。
		404：NOT FOUND；
		
		500：系统内部错误；
		503：服务不可用；
	
	
	
	
	
