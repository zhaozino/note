
***********************************************************************

服务限流、降级、熔断

限流算法
		
	漏桶(leaky bucket)
		漏桶算法思路很简单，水（数据或者请求）先进入到漏桶里，漏桶以一定的速度出水，当水流入速度过大会直接溢出，即请求被拒绝丢弃，
		可以看出漏桶算法能强行限制数据的传输速率；
		
		在某些情况下，漏桶算法不能够有效地使用网络资源。因为漏桶的漏出速率是固定的参数，所以，即使网络中不存在资源冲突（没有发生拥塞），
		漏桶算法也不能使某一个单独的流突发到端口速率。因此，漏桶算法对于存在突发特性的流量来说缺乏效率。而令牌桶算法则能够满足这些具有突发特性的流量。
		通常，漏桶算法与令牌桶算法可以结合起来为网络流量提供更大的控制。
		
	令牌桶(Token Bucket)
		而如果请求需要被处理，则需要先从桶里获取一个令牌，当桶里没有令牌可取时，则拒绝服务。 令牌桶的另外一个好处是可以方便的改变速度。 一旦需要提高速率，
		则按需提高放入桶中的令牌的速率。 一般会定时(比如100毫秒)往桶中增加一定数量的令牌， 有些变种算法则实时的计算应该增加的令牌的数量, 
		比如华为的专利"采用令牌漏桶进行报文限流的方法"(CN 1536815 A),提供了一种动态计算可用令牌数的方法， 相比其它定时增加令牌的方法， 它只在收到一个报文后，
		计算该报文与前一报文到来的时间间隔内向令牌漏桶内注入的令牌数， 并计算判断桶内的令牌数是否满足传送该报文的要求。
		
常见的 Rate limiting 的实现方式

	Proxy 层的实现，针对部分 URL 或者 API 接口进行访问频率限制

	Nginx 模块
		limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;

		server {
			location /search/ {
				limit_req zone=one burst=5;
			}
 
		详细参见：  ngx_http_limit_req_module

	Haproxy 提供的功能
		详细参见：  Haproxy Rate limit 模块
	
	基于 Redis 功能的实现
		这个在 Redis 官方文档有非常详细的实现。一般适用于所有类型的应用，比如 PHP、Python 等等。
		Redis 的实现方式可以支持分布式服务的访问频率的集中控制。Redis 的频率限制实现方式还适用于在应用中无法状态保存状态的场景。
		参见：Redis INCR rate limiter

 

网上有众多关于这方面的文章，这里列出了本文参考的一些文档。

	http://en.wikipedia.org/wiki/Token_bucket
	http://en.wikipedia.org/wiki/Leaky_bucket
	http://www.cnblogs.com/LBSer/p/4083131.html
	http://www.cnblogs.com/mushroom/p/4659200.html
	http://www.cnblogs.com/zhengyun_ustc/archive/2012/11/17/topic1.html